
Dual_Actuator_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f0  080071f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f8  080071f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f8  080071f8  000171f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000000c  0800720c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800720c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c17  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002880  00000000  00000000  00035c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  000384d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  00039858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029b3f  00000000  00000000  0003aa90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f424  00000000  00000000  000645cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107bd5  00000000  00000000  000739f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b5c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  0017b644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007190 	.word	0x08007190

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007190 	.word	0x08007190

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ADC_Create_Start>:

#define ADC1self					//Declaration to the file guards and unnecessary variable declaration
#define ADC2self					//Declaration to the file guards and unnecessary variable declaration

void ADC_Create_Start (ADC_HandleTypeDef *adchandle, int ADC_Number, int Total_Channels)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	 * Argument 1: ADC Handel Type Def, example: &hadc1
	 * Argument 2: ADC Number, example: 1 if ADC1 is being used
	 * Argument 3: Total number of channels of the particular ADC being used, if 10 channels of ADC1 are used, then input to this argument is 10
	 */

	if (ADC_Number == 1)															//Checks the ADC number
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d105      	bne.n	80004e6 <ADC_Create_Start+0x1e>
	{
	#ifdef ADC1self																	//Use #define to enable channel, use only in analog.h file
		HAL_ADC_Start_DMA(adchandle, (uint32_t *)adc1values, Total_Channels);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	461a      	mov	r2, r3
 80004de:	4908      	ldr	r1, [pc, #32]	; (8000500 <ADC_Create_Start+0x38>)
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f001 ff85 	bl	80023f0 <HAL_ADC_Start_DMA>
	#endif																			//Endif file guard
	}

	if (ADC_Number == 2)															//Checks the ADC number
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d105      	bne.n	80004f8 <ADC_Create_Start+0x30>
	{
	#ifdef ADC2self																	//Use #define to enable channel, use only in analog.h file
		HAL_ADC_Start_DMA(adchandle, (uint32_t *)adc2values, Total_Channels);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <ADC_Create_Start+0x3c>)
 80004f2:	68f8      	ldr	r0, [r7, #12]
 80004f4:	f001 ff7c 	bl	80023f0 <HAL_ADC_Start_DMA>
	#ifdef ADC3self																	//Use #define to enable channel, use only in analog.h file
		HAL_ADC_Start_DMA(adchandle, (uint32_t *)adc3values, Total_Channels);
	#endif																			//Endif file guard
	}

}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000002c 	.word	0x2000002c
 8000504:	20000038 	.word	0x20000038

08000508 <ADC_Channel_Init>:

void ADC_Channel_Init (struct ANALOGIN * analogin, int ADC_Number, int channel_rank)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	 * Argument 1: ANALOGIN struct, named based on the analog input pin name, example: Pot1
	 * Argument 2: ADC Number, example: 1 if ADC1 is being used
	 * Argument 3: Rank of the Channel being initialized, example: if channel 5 of ADC1 has a Rank of 1, then input is 1
	 */

	analogin->ADC_number = ADC_Number;				//Writes the ADC number to the structure
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	601a      	str	r2, [r3, #0]
	analogin->Channel = channel_rank;				//Writes the channel rank to the structure
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	605a      	str	r2, [r3, #4]

}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <Analog_Value>:

uint16_t Analog_Value (struct ANALOGIN * analogin)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	 * Inputs:
	 * Argument 1: ANALOGIN struct, named based on the analog input pin name, example: Pot1
	*/

	#ifdef ADC1self										//Use #define to enable channel, use only in analog.h file
	if (analogin->ADC_number == 1)						//Checks the ADC number
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <Analog_Value+0x1e>
		return(adc1values[analogin->Channel - 1]);		//Returns the ADC value from the array
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <Analog_Value+0x44>)
 8000544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000548:	e00b      	b.n	8000562 <Analog_Value+0x36>
	#endif												//Endif file guard

	#ifdef ADC2self										//Use #define to enable channel, use only in analog.h file
	if (analogin->ADC_number == 2)							//Checks the ADC number
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b02      	cmp	r3, #2
 8000550:	d106      	bne.n	8000560 <Analog_Value+0x34>
		return(adc2values[analogin->Channel - 1]);		//Returns the ADC value from the array
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <Analog_Value+0x48>)
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	e000      	b.n	8000562 <Analog_Value+0x36>
	if (analogin->ADC_number == 3)							//Checks the ADC number
		return(adc3values[analogin->Channel - 1]);		//Returns the ADC value from the array
	#endif												//Endif file guard

	else
		return(NULL);
 8000560:	2300      	movs	r3, #0

}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000038 	.word	0x20000038

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f001 fba3 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f977 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fd95 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800058a:	f000 fd65 	bl	8001058 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800058e:	f000 fd33 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000592:	f000 fb7f 	bl	8000c94 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000596:	f000 fc23 	bl	8000de0 <MX_TIM7_Init>
  MX_ADC2_Init();
 800059a:	f000 fac1 	bl	8000b20 <MX_ADC2_Init>
  MX_ADC1_Init();
 800059e:	f000 f9f3 	bl	8000988 <MX_ADC1_Init>
  MX_TIM8_Init();
 80005a2:	f000 fc53 	bl	8000e4c <MX_TIM8_Init>
  MX_UART4_Init();
 80005a6:	f000 fcf7 	bl	8000f98 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  //Interrupt timer setup for the controller
  TimerInterruptInit (&Controller, TIM7,  &htim7, 80000000, 5000);
 80005aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	4b90      	ldr	r3, [pc, #576]	; (80007f4 <main+0x27c>)
 80005b2:	4a91      	ldr	r2, [pc, #580]	; (80007f8 <main+0x280>)
 80005b4:	4991      	ldr	r1, [pc, #580]	; (80007fc <main+0x284>)
 80005b6:	4892      	ldr	r0, [pc, #584]	; (8000800 <main+0x288>)
 80005b8:	f001 faea 	bl	8001b90 <TimerInterruptInit>
  StartInterrupt (&Controller);
 80005bc:	4890      	ldr	r0, [pc, #576]	; (8000800 <main+0x288>)
 80005be:	f001 fb4b 	bl	8001c58 <StartInterrupt>
  //Interrupt timer setup for the controller

  //ADC setup for the potentiometer and current sensor
  // 			(ADC, ADC No, Rank)
  ADC_Create_Start (&hadc1, 1, 6);
 80005c2:	2206      	movs	r2, #6
 80005c4:	2101      	movs	r1, #1
 80005c6:	488f      	ldr	r0, [pc, #572]	; (8000804 <main+0x28c>)
 80005c8:	f7ff ff7e 	bl	80004c8 <ADC_Create_Start>
  ADC_Channel_Init (&Pot1A, 1, 5);
 80005cc:	2205      	movs	r2, #5
 80005ce:	2101      	movs	r1, #1
 80005d0:	488d      	ldr	r0, [pc, #564]	; (8000808 <main+0x290>)
 80005d2:	f7ff ff99 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Pot1B, 1, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2101      	movs	r1, #1
 80005da:	488c      	ldr	r0, [pc, #560]	; (800080c <main+0x294>)
 80005dc:	f7ff ff94 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Pot1C, 1, 2);
 80005e0:	2202      	movs	r2, #2
 80005e2:	2101      	movs	r1, #1
 80005e4:	488a      	ldr	r0, [pc, #552]	; (8000810 <main+0x298>)
 80005e6:	f7ff ff8f 	bl	8000508 <ADC_Channel_Init>


  ADC_Channel_Init (&Pot2A, 1, 4);
 80005ea:	2204      	movs	r2, #4
 80005ec:	2101      	movs	r1, #1
 80005ee:	4889      	ldr	r0, [pc, #548]	; (8000814 <main+0x29c>)
 80005f0:	f7ff ff8a 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Pot2B, 1, 3);
 80005f4:	2203      	movs	r2, #3
 80005f6:	2101      	movs	r1, #1
 80005f8:	4887      	ldr	r0, [pc, #540]	; (8000818 <main+0x2a0>)
 80005fa:	f7ff ff85 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Pot2C, 1, 6);
 80005fe:	2206      	movs	r2, #6
 8000600:	2101      	movs	r1, #1
 8000602:	4886      	ldr	r0, [pc, #536]	; (800081c <main+0x2a4>)
 8000604:	f7ff ff80 	bl	8000508 <ADC_Channel_Init>


  // 			(ADC, ADC No, Rank)
  ADC_Create_Start (&hadc2, 2, 6);
 8000608:	2206      	movs	r2, #6
 800060a:	2102      	movs	r1, #2
 800060c:	4884      	ldr	r0, [pc, #528]	; (8000820 <main+0x2a8>)
 800060e:	f7ff ff5b 	bl	80004c8 <ADC_Create_Start>
  ADC_Channel_Init (&Cs1A, 2, 6);
 8000612:	2206      	movs	r2, #6
 8000614:	2102      	movs	r1, #2
 8000616:	4883      	ldr	r0, [pc, #524]	; (8000824 <main+0x2ac>)
 8000618:	f7ff ff76 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Cs1B, 2, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	2102      	movs	r1, #2
 8000620:	4881      	ldr	r0, [pc, #516]	; (8000828 <main+0x2b0>)
 8000622:	f7ff ff71 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Cs1C, 2, 2);
 8000626:	2202      	movs	r2, #2
 8000628:	2102      	movs	r1, #2
 800062a:	4880      	ldr	r0, [pc, #512]	; (800082c <main+0x2b4>)
 800062c:	f7ff ff6c 	bl	8000508 <ADC_Channel_Init>


  ADC_Channel_Init (&Cs2A, 2, 4);
 8000630:	2204      	movs	r2, #4
 8000632:	2102      	movs	r1, #2
 8000634:	487e      	ldr	r0, [pc, #504]	; (8000830 <main+0x2b8>)
 8000636:	f7ff ff67 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Cs2B, 2, 3);
 800063a:	2203      	movs	r2, #3
 800063c:	2102      	movs	r1, #2
 800063e:	487d      	ldr	r0, [pc, #500]	; (8000834 <main+0x2bc>)
 8000640:	f7ff ff62 	bl	8000508 <ADC_Channel_Init>

  ADC_Channel_Init (&Cs2C, 2, 5);
 8000644:	2205      	movs	r2, #5
 8000646:	2102      	movs	r1, #2
 8000648:	487b      	ldr	r0, [pc, #492]	; (8000838 <main+0x2c0>)
 800064a:	f7ff ff5d 	bl	8000508 <ADC_Channel_Init>
  //ADC setup for the potentiometer and current sensor

  //Servo timer setup
  ServoInit (&Servo1A, TIM1, TIM_CHANNEL_1, &htim1, 2, 80000000);
 800064e:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <main+0x27c>)
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2302      	movs	r3, #2
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4b79      	ldr	r3, [pc, #484]	; (800083c <main+0x2c4>)
 8000658:	2200      	movs	r2, #0
 800065a:	4979      	ldr	r1, [pc, #484]	; (8000840 <main+0x2c8>)
 800065c:	4879      	ldr	r0, [pc, #484]	; (8000844 <main+0x2cc>)
 800065e:	f000 fe07 	bl	8001270 <ServoInit>

  ServoInit (&Servo1B, TIM1, TIM_CHANNEL_2, &htim1, 1, 80000000);
 8000662:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <main+0x27c>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2301      	movs	r3, #1
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4b74      	ldr	r3, [pc, #464]	; (800083c <main+0x2c4>)
 800066c:	2204      	movs	r2, #4
 800066e:	4974      	ldr	r1, [pc, #464]	; (8000840 <main+0x2c8>)
 8000670:	4875      	ldr	r0, [pc, #468]	; (8000848 <main+0x2d0>)
 8000672:	f000 fdfd 	bl	8001270 <ServoInit>

  ServoInit (&Servo1C, TIM1, TIM_CHANNEL_3, &htim1, 3, 80000000);
 8000676:	4b5f      	ldr	r3, [pc, #380]	; (80007f4 <main+0x27c>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2303      	movs	r3, #3
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4b6f      	ldr	r3, [pc, #444]	; (800083c <main+0x2c4>)
 8000680:	2208      	movs	r2, #8
 8000682:	496f      	ldr	r1, [pc, #444]	; (8000840 <main+0x2c8>)
 8000684:	4871      	ldr	r0, [pc, #452]	; (800084c <main+0x2d4>)
 8000686:	f000 fdf3 	bl	8001270 <ServoInit>


  ServoInit (&Servo2A, TIM8, TIM_CHANNEL_1, &htim8, 2, 80000000);
 800068a:	4b5a      	ldr	r3, [pc, #360]	; (80007f4 <main+0x27c>)
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	4b6f      	ldr	r3, [pc, #444]	; (8000850 <main+0x2d8>)
 8000694:	2200      	movs	r2, #0
 8000696:	496f      	ldr	r1, [pc, #444]	; (8000854 <main+0x2dc>)
 8000698:	486f      	ldr	r0, [pc, #444]	; (8000858 <main+0x2e0>)
 800069a:	f000 fde9 	bl	8001270 <ServoInit>

  ServoInit (&Servo2B, TIM8, TIM_CHANNEL_2, &htim8, 1, 80000000);
 800069e:	4b55      	ldr	r3, [pc, #340]	; (80007f4 <main+0x27c>)
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2301      	movs	r3, #1
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4b6a      	ldr	r3, [pc, #424]	; (8000850 <main+0x2d8>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	496a      	ldr	r1, [pc, #424]	; (8000854 <main+0x2dc>)
 80006ac:	486b      	ldr	r0, [pc, #428]	; (800085c <main+0x2e4>)
 80006ae:	f000 fddf 	bl	8001270 <ServoInit>

  ServoInit (&Servo2C, TIM8, TIM_CHANNEL_3, &htim8, 3, 80000000);
 80006b2:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <main+0x27c>)
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	2303      	movs	r3, #3
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	4b65      	ldr	r3, [pc, #404]	; (8000850 <main+0x2d8>)
 80006bc:	2208      	movs	r2, #8
 80006be:	4965      	ldr	r1, [pc, #404]	; (8000854 <main+0x2dc>)
 80006c0:	4867      	ldr	r0, [pc, #412]	; (8000860 <main+0x2e8>)
 80006c2:	f000 fdd5 	bl	8001270 <ServoInit>
  //Servo timer setup

  //UART Setup
  HAL_UART_Receive_IT(&huart4, receiveData, sizeof(receiveData));
 80006c6:	2209      	movs	r2, #9
 80006c8:	4966      	ldr	r1, [pc, #408]	; (8000864 <main+0x2ec>)
 80006ca:	4867      	ldr	r0, [pc, #412]	; (8000868 <main+0x2f0>)
 80006cc:	f005 fd56 	bl	800617c <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */

	  //HAL_UART_Receive(&huart4, receiveData, sizeof(receiveData), 10);

	  HAL_UART_Receive_IT(&huart4, receiveData, sizeof(receiveData));
 80006d0:	2209      	movs	r2, #9
 80006d2:	4964      	ldr	r1, [pc, #400]	; (8000864 <main+0x2ec>)
 80006d4:	4864      	ldr	r0, [pc, #400]	; (8000868 <main+0x2f0>)
 80006d6:	f005 fd51 	bl	800617c <HAL_UART_Receive_IT>

	  for(int i = 0; i < sizeof(receiveData); i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	e084      	b.n	80007ea <main+0x272>
	  {
		  if((receiveData[i] == 83) && (receiveData[(i + 8) % sizeof(receiveData)] == 69) && (receiveData[(i + 7) % sizeof(receiveData)] == 55))
 80006e0:	4a60      	ldr	r2, [pc, #384]	; (8000864 <main+0x2ec>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b53      	cmp	r3, #83	; 0x53
 80006ea:	d17b      	bne.n	80007e4 <main+0x26c>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3308      	adds	r3, #8
 80006f0:	4619      	mov	r1, r3
 80006f2:	4b5e      	ldr	r3, [pc, #376]	; (800086c <main+0x2f4>)
 80006f4:	fba3 2301 	umull	r2, r3, r3, r1
 80006f8:	085a      	lsrs	r2, r3, #1
 80006fa:	4613      	mov	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	4413      	add	r3, r2
 8000700:	1aca      	subs	r2, r1, r3
 8000702:	4b58      	ldr	r3, [pc, #352]	; (8000864 <main+0x2ec>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	2b45      	cmp	r3, #69	; 0x45
 8000708:	d16c      	bne.n	80007e4 <main+0x26c>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3307      	adds	r3, #7
 800070e:	4619      	mov	r1, r3
 8000710:	4b56      	ldr	r3, [pc, #344]	; (800086c <main+0x2f4>)
 8000712:	fba3 2301 	umull	r2, r3, r3, r1
 8000716:	085a      	lsrs	r2, r3, #1
 8000718:	4613      	mov	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4413      	add	r3, r2
 800071e:	1aca      	subs	r2, r1, r3
 8000720:	4b50      	ldr	r3, [pc, #320]	; (8000864 <main+0x2ec>)
 8000722:	5c9b      	ldrb	r3, [r3, r2]
 8000724:	2b37      	cmp	r3, #55	; 0x37
 8000726:	d15d      	bne.n	80007e4 <main+0x26c>
		  {
			  for(int z = 0; z < sizeof(receiveData); z++)
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	e015      	b.n	800075a <main+0x1e2>
				  filteredData[z] = receiveData[(i + z) % sizeof(receiveData)];
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4619      	mov	r1, r3
 8000736:	4b4d      	ldr	r3, [pc, #308]	; (800086c <main+0x2f4>)
 8000738:	fba3 2301 	umull	r2, r3, r3, r1
 800073c:	085a      	lsrs	r2, r3, #1
 800073e:	4613      	mov	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	4413      	add	r3, r2
 8000744:	1aca      	subs	r2, r1, r3
 8000746:	4b47      	ldr	r3, [pc, #284]	; (8000864 <main+0x2ec>)
 8000748:	5c99      	ldrb	r1, [r3, r2]
 800074a:	4a49      	ldr	r2, [pc, #292]	; (8000870 <main+0x2f8>)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	4413      	add	r3, r2
 8000750:	460a      	mov	r2, r1
 8000752:	701a      	strb	r2, [r3, #0]
			  for(int z = 0; z < sizeof(receiveData); z++)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b08      	cmp	r3, #8
 800075e:	d9e6      	bls.n	800072e <main+0x1b6>

		  		AngleInput(&Servo1A, filteredData[1]);
 8000760:	4b43      	ldr	r3, [pc, #268]	; (8000870 <main+0x2f8>)
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	ee07 3a90 	vmov	s15, r3
 8000768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800076c:	eeb0 0a67 	vmov.f32	s0, s15
 8000770:	4834      	ldr	r0, [pc, #208]	; (8000844 <main+0x2cc>)
 8000772:	f000 fe31 	bl	80013d8 <AngleInput>
		  		AngleInput(&Servo1B, filteredData[2]);
 8000776:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <main+0x2f8>)
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	eeb0 0a67 	vmov.f32	s0, s15
 8000786:	4830      	ldr	r0, [pc, #192]	; (8000848 <main+0x2d0>)
 8000788:	f000 fe26 	bl	80013d8 <AngleInput>
		  		AngleInput(&Servo1C, filteredData[3]);
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <main+0x2f8>)
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	482b      	ldr	r0, [pc, #172]	; (800084c <main+0x2d4>)
 800079e:	f000 fe1b 	bl	80013d8 <AngleInput>
		  		AngleInput(&Servo2A, filteredData[4]);
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <main+0x2f8>)
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ae:	eeb0 0a67 	vmov.f32	s0, s15
 80007b2:	4829      	ldr	r0, [pc, #164]	; (8000858 <main+0x2e0>)
 80007b4:	f000 fe10 	bl	80013d8 <AngleInput>
		  		AngleInput(&Servo2B, filteredData[5]);
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <main+0x2f8>)
 80007ba:	795b      	ldrb	r3, [r3, #5]
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c4:	eeb0 0a67 	vmov.f32	s0, s15
 80007c8:	4824      	ldr	r0, [pc, #144]	; (800085c <main+0x2e4>)
 80007ca:	f000 fe05 	bl	80013d8 <AngleInput>
		  		AngleInput(&Servo2C, filteredData[6]);
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <main+0x2f8>)
 80007d0:	799b      	ldrb	r3, [r3, #6]
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007da:	eeb0 0a67 	vmov.f32	s0, s15
 80007de:	4820      	ldr	r0, [pc, #128]	; (8000860 <main+0x2e8>)
 80007e0:	f000 fdfa 	bl	80013d8 <AngleInput>
	  for(int i = 0; i < sizeof(receiveData); i++)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3301      	adds	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b08      	cmp	r3, #8
 80007ee:	f67f af77 	bls.w	80006e0 <main+0x168>
	  HAL_UART_Receive_IT(&huart4, receiveData, sizeof(receiveData));
 80007f2:	e76d      	b.n	80006d0 <main+0x158>
 80007f4:	04c4b400 	.word	0x04c4b400
 80007f8:	20000498 	.word	0x20000498
 80007fc:	40001400 	.word	0x40001400
 8000800:	200004fc 	.word	0x200004fc
 8000804:	2000015c 	.word	0x2000015c
 8000808:	20000140 	.word	0x20000140
 800080c:	20000148 	.word	0x20000148
 8000810:	200001d0 	.word	0x200001d0
 8000814:	20000044 	.word	0x20000044
 8000818:	2000004c 	.word	0x2000004c
 800081c:	20000220 	.word	0x20000220
 8000820:	200000a0 	.word	0x200000a0
 8000824:	20000104 	.word	0x20000104
 8000828:	20000514 	.word	0x20000514
 800082c:	200002c0 	.word	0x200002c0
 8000830:	2000024c 	.word	0x2000024c
 8000834:	2000010c 	.word	0x2000010c
 8000838:	20000114 	.word	0x20000114
 800083c:	200002c8 	.word	0x200002c8
 8000840:	40012c00 	.word	0x40012c00
 8000844:	20000474 	.word	0x20000474
 8000848:	2000011c 	.word	0x2000011c
 800084c:	20000228 	.word	0x20000228
 8000850:	20000054 	.word	0x20000054
 8000854:	40013400 	.word	0x40013400
 8000858:	20000308 	.word	0x20000308
 800085c:	200004d8 	.word	0x200004d8
 8000860:	2000029c 	.word	0x2000029c
 8000864:	20000150 	.word	0x20000150
 8000868:	2000032c 	.word	0x2000032c
 800086c:	38e38e39 	.word	0x38e38e39
 8000870:	20000094 	.word	0x20000094

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b0b8      	sub	sp, #224	; 0xe0
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800087e:	2244      	movs	r2, #68	; 0x44
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f006 fc7c 	bl	8007180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2288      	movs	r2, #136	; 0x88
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fc6e 	bl	8007180 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b2:	2310      	movs	r3, #16
 80008b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008be:	2302      	movs	r3, #2
 80008c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ca:	230a      	movs	r3, #10
 80008cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d0:	2307      	movs	r3, #7
 80008d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 f8ce 	bl	8003a88 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008f2:	f000 fcb5 	bl	8001260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2303      	movs	r3, #3
 80008fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000914:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fc9a 	bl	8004254 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000926:	f000 fc9b 	bl	8001260 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 800092a:	f244 030a 	movw	r3, #16394	; 0x400a
 800092e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800093c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800093e:	2302      	movs	r3, #2
 8000940:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000946:	2308      	movs	r3, #8
 8000948:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800094a:	2307      	movs	r3, #7
 800094c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800095a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fe7c 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800096a:	f000 fc79 	bl	8001260 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800096e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000972:	f003 f833 	bl	80039dc <HAL_PWREx_ControlVoltageScaling>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800097c:	f000 fc70 	bl	8001260 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	37e0      	adds	r7, #224	; 0xe0
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80009aa:	4b55      	ldr	r3, [pc, #340]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009ac:	4a55      	ldr	r2, [pc, #340]	; (8000b04 <MX_ADC1_Init+0x17c>)
 80009ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80009b0:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009ba:	2210      	movs	r2, #16
 80009bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009c4:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ca:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d0:	4b4b      	ldr	r3, [pc, #300]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009d6:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009d8:	2201      	movs	r2, #1
 80009da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80009dc:	4b48      	ldr	r3, [pc, #288]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009de:	2206      	movs	r2, #6
 80009e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80009ea:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009fc:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <MX_ADC1_Init+0x178>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a04:	4b3e      	ldr	r3, [pc, #248]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a12:	483b      	ldr	r0, [pc, #236]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000a14:	f001 fb98 	bl	8002148 <HAL_ADC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000a1e:	f000 fc1f 	bl	8001260 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4834      	ldr	r0, [pc, #208]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000a2e:	f002 fa29 	bl	8002e84 <HAL_ADCEx_MultiModeConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a38:	f000 fc12 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3c:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <MX_ADC1_Init+0x180>)
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a40:	2306      	movs	r3, #6
 8000a42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a44:	2307      	movs	r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a48:	237f      	movs	r3, #127	; 0x7f
 8000a4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4829      	ldr	r0, [pc, #164]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000a5a:	f001 fd9b 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a64:	f000 fbfc 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_ADC1_Init+0x184>)
 8000a6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4822      	ldr	r0, [pc, #136]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000a76:	f001 fd8d 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000a80:	f000 fbee 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_ADC1_Init+0x188>)
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a88:	2312      	movs	r3, #18
 8000a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481b      	ldr	r0, [pc, #108]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000a92:	f001 fd7f 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000a9c:	f000 fbe0 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_ADC1_Init+0x18c>)
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aa4:	2318      	movs	r3, #24
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000aae:	f001 fd71 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000ab8:	f000 fbd2 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_ADC1_Init+0x190>)
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000acc:	f001 fd62 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000ad6:	f000 fbc3 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_ADC1_Init+0x194>)
 8000adc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ade:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_ADC1_Init+0x178>)
 8000aea:	f001 fd53 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000af4:	f000 fbb4 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000015c 	.word	0x2000015c
 8000b04:	50040000 	.word	0x50040000
 8000b08:	08600004 	.word	0x08600004
 8000b0c:	10c00010 	.word	0x10c00010
 8000b10:	14f00020 	.word	0x14f00020
 8000b14:	19200040 	.word	0x19200040
 8000b18:	25b00200 	.word	0x25b00200
 8000b1c:	32601000 	.word	0x32601000

08000b20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000b36:	4b4f      	ldr	r3, [pc, #316]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b38:	4a4f      	ldr	r2, [pc, #316]	; (8000c78 <MX_ADC2_Init+0x158>)
 8000b3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000b3c:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b42:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000b44:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b46:	2210      	movs	r2, #16
 8000b48:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b50:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b62:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 6;
 8000b68:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b6a:	2206      	movs	r2, #6
 8000b6c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b96:	4b37      	ldr	r3, [pc, #220]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b9e:	4835      	ldr	r0, [pc, #212]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000ba0:	f001 fad2 	bl	8002148 <HAL_ADC_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000baa:	f000 fb59 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bae:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <MX_ADC2_Init+0x15c>)
 8000bb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bba:	237f      	movs	r3, #127	; 0x7f
 8000bbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4619      	mov	r1, r3
 8000bca:	482a      	ldr	r0, [pc, #168]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000bcc:	f001 fce2 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000bd6:	f000 fb43 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_ADC2_Init+0x160>)
 8000bdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bde:	230c      	movs	r3, #12
 8000be0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000be2:	463b      	mov	r3, r7
 8000be4:	4619      	mov	r1, r3
 8000be6:	4823      	ldr	r0, [pc, #140]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000be8:	f001 fcd4 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000bf2:	f000 fb35 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_ADC2_Init+0x164>)
 8000bf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	481c      	ldr	r0, [pc, #112]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000c04:	f001 fcc6 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000c0e:	f000 fb27 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_ADC2_Init+0x168>)
 8000c14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c16:	2318      	movs	r3, #24
 8000c18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4815      	ldr	r0, [pc, #84]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000c20:	f001 fcb8 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC2_Init+0x10e>
  {
    Error_Handler();
 8000c2a:	f000 fb19 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC2_Init+0x16c>)
 8000c30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000c3e:	f001 fca9 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC2_Init+0x12c>
  {
    Error_Handler();
 8000c48:	f000 fb0a 	bl	8001260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_ADC2_Init+0x170>)
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c50:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_ADC2_Init+0x154>)
 8000c5c:	f001 fc9a 	bl	8002594 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC2_Init+0x14a>
  {
    Error_Handler();
 8000c66:	f000 fafb 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000a0 	.word	0x200000a0
 8000c78:	50040100 	.word	0x50040100
 8000c7c:	04300002 	.word	0x04300002
 8000c80:	0c900008 	.word	0x0c900008
 8000c84:	2a000400 	.word	0x2a000400
 8000c88:	2e300800 	.word	0x2e300800
 8000c8c:	3ac04000 	.word	0x3ac04000
 8000c90:	3ef08000 	.word	0x3ef08000

08000c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b096      	sub	sp, #88	; 0x58
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	222c      	movs	r2, #44	; 0x2c
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 fa5d 	bl	8007180 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc6:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000cc8:	4a44      	ldr	r2, [pc, #272]	; (8000ddc <MX_TIM1_Init+0x148>)
 8000cca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ccc:	4b42      	ldr	r3, [pc, #264]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cf0:	4839      	ldr	r0, [pc, #228]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000cf2:	f004 f9b9 	bl	8005068 <HAL_TIM_PWM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000cfc:	f000 fab0 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d10:	4619      	mov	r1, r3
 8000d12:	4831      	ldr	r0, [pc, #196]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000d14:	f005 f82c 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000d1e:	f000 fa9f 	bl	8001260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d22:	2360      	movs	r3, #96	; 0x60
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4824      	ldr	r0, [pc, #144]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000d48:	f004 fb32 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d52:	f000 fa85 	bl	8001260 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481e      	ldr	r0, [pc, #120]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000d60:	f004 fb26 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000d6a:	f000 fa79 	bl	8001260 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d72:	2208      	movs	r2, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000d78:	f004 fb1a 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000d82:	f000 fa6d 	bl	8001260 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000dbc:	f005 f860 	bl	8005e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000dc6:	f000 fa4b 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM1_Init+0x144>)
 8000dcc:	f000 fd2e 	bl	800182c <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3758      	adds	r7, #88	; 0x58
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002c8 	.word	0x200002c8
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <MX_TIM7_Init+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e10:	f004 f8d4 	bl	8004fbc <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e1a:	f000 fa21 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM7_Init+0x64>)
 8000e2c:	f004 ffa0 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e36:	f000 fa13 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000498 	.word	0x20000498
 8000e48:	40001400 	.word	0x40001400

08000e4c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b096      	sub	sp, #88	; 0x58
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	222c      	movs	r2, #44	; 0x2c
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 f981 	bl	8007180 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000e80:	4a44      	ldr	r2, [pc, #272]	; (8000f94 <MX_TIM8_Init+0x148>)
 8000e82:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e84:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8000e90:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ea8:	4839      	ldr	r0, [pc, #228]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000eaa:	f004 f8dd 	bl	8005068 <HAL_TIM_PWM_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000eb4:	f000 f9d4 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ec4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4831      	ldr	r0, [pc, #196]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000ecc:	f004 ff50 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000ed6:	f000 f9c3 	bl	8001260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eda:	2360      	movs	r3, #96	; 0x60
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	4824      	ldr	r0, [pc, #144]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000f00:	f004 fa56 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000f0a:	f000 f9a9 	bl	8001260 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f12:	2204      	movs	r2, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	481e      	ldr	r0, [pc, #120]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000f18:	f004 fa4a 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8000f22:	f000 f99d 	bl	8001260 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4818      	ldr	r0, [pc, #96]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000f30:	f004 fa3e 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8000f3a:	f000 f991 	bl	8001260 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000f74:	f004 ff84 	bl	8005e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 8000f7e:	f000 f96f 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM8_Init+0x144>)
 8000f84:	f000 fc52 	bl	800182c <HAL_TIM_MspPostInit>

}
 8000f88:	bf00      	nop
 8000f8a:	3758      	adds	r7, #88	; 0x58
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000054 	.word	0x20000054
 8000f94:	40013400 	.word	0x40013400

08000f98 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <MX_UART4_Init+0x5c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_UART4_Init+0x58>)
 8000fdc:	f004 ffec 	bl	8005fb8 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 f93b 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000032c 	.word	0x2000032c
 8000ff4:	40004c00 	.word	0x40004c00

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <MX_USART2_UART_Init+0x5c>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800103c:	f004 ffbc 	bl	8005fb8 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001046:	f000 f90b 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200003ac 	.word	0x200003ac
 8001054:	40004400 	.word	0x40004400

08001058 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_DMA_Init+0x58>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MX_DMA_Init+0x58>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6493      	str	r3, [r2, #72]	; 0x48
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_DMA_Init+0x58>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2101      	movs	r1, #1
 800107a:	200b      	movs	r0, #11
 800107c:	f002 f889 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001080:	200b      	movs	r0, #11
 8001082:	f002 f8a2 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	200c      	movs	r0, #12
 800108c:	f002 f881 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001090:	200c      	movs	r0, #12
 8001092:	f002 f89a 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2101      	movs	r1, #1
 800109a:	2011      	movs	r0, #17
 800109c:	f002 f879 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80010a0:	2011      	movs	r0, #17
 80010a2:	f002 f892 	bl	80031ca <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_GPIO_Init+0x98>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a1f      	ldr	r2, [pc, #124]	; (800114c <MX_GPIO_Init+0x98>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_GPIO_Init+0x98>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_GPIO_Init+0x98>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <MX_GPIO_Init+0x98>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_GPIO_Init+0x98>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_GPIO_Init+0x98>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_GPIO_Init+0x98>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_GPIO_Init+0x98>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_GPIO_Init+0x98>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a0d      	ldr	r2, [pc, #52]	; (800114c <MX_GPIO_Init+0x98>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_GPIO_Init+0x98>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_GPIO_Init+0x9c>)
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_GPIO_Init+0xa0>)
 8001140:	f002 fa96 	bl	8003670 <HAL_GPIO_Init>

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000
 8001150:	10210000 	.word	0x10210000
 8001154:	48000800 	.word	0x48000800

08001158 <Inter>:
 }
return len;
}

void Inter()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

	//HAL_UART_Receive_IT(&hlpuart1, receiveData, sizeof(receiveData));

    transmitData[0] = *"A";
 800115c:	2241      	movs	r2, #65	; 0x41
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <Inter+0xd0>)
 8001160:	701a      	strb	r2, [r3, #0]
    transmitData[13] = 56;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <Inter+0xd0>)
 8001164:	2238      	movs	r2, #56	; 0x38
 8001166:	735a      	strb	r2, [r3, #13]
    transmitData[14] = *"B";
 8001168:	2242      	movs	r2, #66	; 0x42
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <Inter+0xd0>)
 800116c:	739a      	strb	r2, [r3, #14]
	transmitData[1] = (uint8_t) Analog_Value(&Pot1A);
 800116e:	482f      	ldr	r0, [pc, #188]	; (800122c <Inter+0xd4>)
 8001170:	f7ff f9dc 	bl	800052c <Analog_Value>
 8001174:	4603      	mov	r3, r0
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <Inter+0xd0>)
 800117a:	705a      	strb	r2, [r3, #1]
	transmitData[2] = (uint8_t) Analog_Value(&Pot1B);
 800117c:	482c      	ldr	r0, [pc, #176]	; (8001230 <Inter+0xd8>)
 800117e:	f7ff f9d5 	bl	800052c <Analog_Value>
 8001182:	4603      	mov	r3, r0
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <Inter+0xd0>)
 8001188:	709a      	strb	r2, [r3, #2]
	transmitData[3] = (uint8_t) Analog_Value(&Pot1C);
 800118a:	482a      	ldr	r0, [pc, #168]	; (8001234 <Inter+0xdc>)
 800118c:	f7ff f9ce 	bl	800052c <Analog_Value>
 8001190:	4603      	mov	r3, r0
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <Inter+0xd0>)
 8001196:	70da      	strb	r2, [r3, #3]
	transmitData[4] = (uint8_t) Analog_Value(&Cs1A);
 8001198:	4827      	ldr	r0, [pc, #156]	; (8001238 <Inter+0xe0>)
 800119a:	f7ff f9c7 	bl	800052c <Analog_Value>
 800119e:	4603      	mov	r3, r0
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <Inter+0xd0>)
 80011a4:	711a      	strb	r2, [r3, #4]
	transmitData[5] = (uint8_t) Analog_Value(&Cs1B);
 80011a6:	4825      	ldr	r0, [pc, #148]	; (800123c <Inter+0xe4>)
 80011a8:	f7ff f9c0 	bl	800052c <Analog_Value>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <Inter+0xd0>)
 80011b2:	715a      	strb	r2, [r3, #5]
	transmitData[6] = (uint8_t) Analog_Value(&Cs1C);
 80011b4:	4822      	ldr	r0, [pc, #136]	; (8001240 <Inter+0xe8>)
 80011b6:	f7ff f9b9 	bl	800052c <Analog_Value>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <Inter+0xd0>)
 80011c0:	719a      	strb	r2, [r3, #6]
	transmitData[7] = (uint8_t) Analog_Value(&Pot2A);
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <Inter+0xec>)
 80011c4:	f7ff f9b2 	bl	800052c <Analog_Value>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <Inter+0xd0>)
 80011ce:	71da      	strb	r2, [r3, #7]
	transmitData[8] = (uint8_t) Analog_Value(&Pot2B);
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <Inter+0xf0>)
 80011d2:	f7ff f9ab 	bl	800052c <Analog_Value>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <Inter+0xd0>)
 80011dc:	721a      	strb	r2, [r3, #8]
	transmitData[9] = (uint8_t) Analog_Value(&Pot2C);
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <Inter+0xf4>)
 80011e0:	f7ff f9a4 	bl	800052c <Analog_Value>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <Inter+0xd0>)
 80011ea:	725a      	strb	r2, [r3, #9]
	transmitData[10] = (uint8_t) Analog_Value(&Cs2A);
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <Inter+0xf8>)
 80011ee:	f7ff f99d 	bl	800052c <Analog_Value>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <Inter+0xd0>)
 80011f8:	729a      	strb	r2, [r3, #10]
	transmitData[11] = (uint8_t) Analog_Value(&Cs2B);
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <Inter+0xfc>)
 80011fc:	f7ff f996 	bl	800052c <Analog_Value>
 8001200:	4603      	mov	r3, r0
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <Inter+0xd0>)
 8001206:	72da      	strb	r2, [r3, #11]
	transmitData[12] = (uint8_t) Analog_Value(&Cs2C);
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <Inter+0x100>)
 800120a:	f7ff f98f 	bl	800052c <Analog_Value>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <Inter+0xd0>)
 8001214:	731a      	strb	r2, [r3, #12]

	HAL_UART_Transmit(&huart4, transmitData, sizeof(transmitData), 10);
 8001216:	230a      	movs	r3, #10
 8001218:	220f      	movs	r2, #15
 800121a:	4903      	ldr	r1, [pc, #12]	; (8001228 <Inter+0xd0>)
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <Inter+0x104>)
 800121e:	f004 ff19 	bl	8006054 <HAL_UART_Transmit>

	//HAL_UART_Transmit(&huart4, transmitData, sizeof(transmitData), 10);

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001c0 	.word	0x200001c0
 800122c:	20000140 	.word	0x20000140
 8001230:	20000148 	.word	0x20000148
 8001234:	200001d0 	.word	0x200001d0
 8001238:	20000104 	.word	0x20000104
 800123c:	20000514 	.word	0x20000514
 8001240:	200002c0 	.word	0x200002c0
 8001244:	20000044 	.word	0x20000044
 8001248:	2000004c 	.word	0x2000004c
 800124c:	20000220 	.word	0x20000220
 8001250:	2000024c 	.word	0x2000024c
 8001254:	2000010c 	.word	0x2000010c
 8001258:	20000114 	.word	0x20000114
 800125c:	2000032c 	.word	0x2000032c

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <ServoInit>:
	 * Argument 4: Timer Handel Type Def, example: &htim4
	 * Argument 5: Channel, example: 3
	 * Argument 6: Timer Clock Speed: 80000000
	 */

	{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]

		servo->timerNr = timeNr;								//Writes the timer number to the structure
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	621a      	str	r2, [r3, #32]
		servo->htim	= TmrHandle;								//Writes the timer handle to the structure
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	61da      	str	r2, [r3, #28]
		servo->Chnl = Cnl;										//Writes the timer channel, user based to the structure
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	611a      	str	r2, [r3, #16]
		servo->Timer_Clock_Speed = tmrclkspd;					//Writes the timer clock speed to the structure
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	601a      	str	r2, [r3, #0]
		servo->PWM_Out_Freq = __SERVO_FREQ__;					//Writes the servo frequency to the structure
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2232      	movs	r2, #50	; 0x32
 800129a:	605a      	str	r2, [r3, #4]
		servo->Counter_Resolution = __COUNTER_RESOLUTION__;		//Writes the resolution of the counter to the structure
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a2:	609a      	str	r2, [r3, #8]
		servo->Prescaler = 0;									//Writes the prescaler to the structure
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]

		servo->Prescaler = servo->Timer_Clock_Speed/(servo->PWM_Out_Freq*servo->Counter_Resolution);		//Writes the timer prescaler to the structure
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	68f9      	ldr	r1, [r7, #12]
 80012b4:	6889      	ldr	r1, [r1, #8]
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	60da      	str	r2, [r3, #12]

		servo->timerNr->PSC = servo->Prescaler;								//Writes the timer prescaler to the timer control register
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	68d2      	ldr	r2, [r2, #12]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
		servo->timerNr->ARR = servo->Counter_Resolution - 1;				//Writes the timer counter resolution to the timer control register
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	3a01      	subs	r2, #1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Start(servo->htim, TmrChnl);							//Start the PWM from the timer channel
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 feee 	bl	80050c0 <HAL_TIM_PWM_Start>

		servo->slope_reciprocal = (__MAX_DUTY__ - __MIN_DUTY__)/(__MAX_ANGLE__ - __MIN_ANGLE__);		//Calculate the slope of the line for the
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <ServoInit+0xa0>)
 80012e8:	615a      	str	r2, [r3, #20]
		servo->yintercept = (__MIN_DUTY__) - (servo->slope_reciprocal)*(__MIN_ANGLE__);					//Calculates the y intercept for the line
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001314 <ServoInit+0xa4>
 80012f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f8:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	edc3 7a06 	vstr	s15, [r3, #24]


	}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	3d597c9a 	.word	0x3d597c9a
 8001314:	00000000 	.word	0x00000000

08001318 <PWMDuty>:
	 *
	 * Inputs:
	 * Argument 1: Servo struct, named based on the servo name, example: ServoA
	 * Argument 2: Duty Cycle Input (0 to 1), example: 0.5
	 */
	{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	ed87 0a00 	vstr	s0, [r7]

		if(servo->Chnl == 1)											//Check if servo channel is 1 as pointer pointing to pointers to pointer is not available
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d110      	bne.n	800134e <PWMDuty+0x36>
			servo->timerNr->CCR1 = servo->Counter_Resolution*dty;		//Applies the duty cycle
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001338:	edd7 7a00 	vldr	s15, [r7]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001348:	ee17 2a90 	vmov	r2, s15
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
		if(servo->Chnl == 2)											//Check if servo channel is 3 as pointer pointing to pointers to pointer is not available
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d110      	bne.n	8001378 <PWMDuty+0x60>
			servo->timerNr->CCR2 = servo->Counter_Resolution*dty;		//Applies the duty cycle
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001362:	edd7 7a00 	vldr	s15, [r7]
 8001366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001372:	ee17 2a90 	vmov	r2, s15
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
		if(servo->Chnl == 3)											//Check if servo channel is 3 as pointer pointing to pointers to pointer is not available
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d110      	bne.n	80013a2 <PWMDuty+0x8a>
			servo->timerNr->CCR3 = servo->Counter_Resolution*dty;		//Applies the duty cycle
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800138c:	edd7 7a00 	vldr	s15, [r7]
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139c:	ee17 2a90 	vmov	r2, s15
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c
		if(servo->Chnl == 4)											//Check if servo channel is 4 as pointer pointing to pointers to pointer is not available
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d110      	bne.n	80013cc <PWMDuty+0xb4>
			servo->timerNr->CCR4 = servo->Counter_Resolution*dty;		//Applies the duty cycle
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b6:	edd7 7a00 	vldr	s15, [r7]
 80013ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c6:	ee17 2a90 	vmov	r2, s15
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40

	}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <AngleInput>:
	 *
	 * Inputs:
	 * Argument 1: Servo struct, named based on the servo name, example: ServoA
	 * Argument 2: Angle Input (degrees) based on duty cycle calculations in servo.h, example: 20
	 */
	{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	ed87 0a00 	vstr	s0, [r7]

		float sat_angle;											//Declares the saturated angle

		if (angle >= __MIN_ANGLE__ && angle <= __MAX_ANGLE__)		//Equivalent to the saturation block on Simulink
 80013e4:	edd7 7a00 	vldr	s15, [r7]
 80013e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	db0b      	blt.n	800140a <AngleInput+0x32>
 80013f2:	edd7 7a00 	vldr	s15, [r7]
 80013f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80014c8 <AngleInput+0xf0>
 80013fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	d802      	bhi.n	800140a <AngleInput+0x32>
			sat_angle = angle;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e015      	b.n	8001436 <AngleInput+0x5e>
		else if(angle < __MIN_ANGLE__)
 800140a:	edd7 7a00 	vldr	s15, [r7]
 800140e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	d503      	bpl.n	8001420 <AngleInput+0x48>
			sat_angle = __MIN_ANGLE__;
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e00a      	b.n	8001436 <AngleInput+0x5e>
		else if (angle > __MAX_ANGLE__)
 8001420:	edd7 7a00 	vldr	s15, [r7]
 8001424:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80014c8 <AngleInput+0xf0>
 8001428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001430:	dd01      	ble.n	8001436 <AngleInput+0x5e>
			sat_angle = __MAX_ANGLE__;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <AngleInput+0xf4>)
 8001434:	617b      	str	r3, [r7, #20]


		float duty;

		duty = (sat_angle*(servo->slope_reciprocal)) + (servo->yintercept);	//Calculates the duty cycle
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	ed93 7a05 	vldr	s14, [r3, #20]
 800143c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	edd3 7a06 	vldr	s15, [r3, #24]
 800144a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144e:	edc7 7a03 	vstr	s15, [r7, #12]


		float sat_duty;

		if (duty >= __MIN_DUTY__ && duty <= __MAX_DUTY__)		//Equivalent to the saturation block on Simulink
 8001452:	edd7 7a03 	vldr	s15, [r7, #12]
 8001456:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	db0b      	blt.n	800147c <AngleInput+0xa4>
 8001464:	edd7 7a03 	vldr	s15, [r7, #12]
 8001468:	eeb2 7a05 	vmov.f32	s14, #37	; 0x41280000  10.5
 800146c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d802      	bhi.n	800147c <AngleInput+0xa4>
			sat_duty = duty;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	e016      	b.n	80014aa <AngleInput+0xd2>
		else if(duty < __MIN_DUTY__)
 800147c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001480:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8001484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d502      	bpl.n	8001494 <AngleInput+0xbc>
			sat_duty = __MIN_DUTY__;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <AngleInput+0xf8>)
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	e00a      	b.n	80014aa <AngleInput+0xd2>
		else if (duty > __MAX_DUTY__)
 8001494:	edd7 7a03 	vldr	s15, [r7, #12]
 8001498:	eeb2 7a05 	vmov.f32	s14, #37	; 0x41280000  10.5
 800149c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd01      	ble.n	80014aa <AngleInput+0xd2>
			sat_duty = __MAX_DUTY__;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <AngleInput+0xfc>)
 80014a8:	613b      	str	r3, [r7, #16]


		PWMDuty (servo, sat_duty/100);			//Outputs the duty cycle while dividing by 100 (see PWMDuty)
 80014aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80014d8 <AngleInput+0x100>
 80014b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014b6:	eeb0 0a66 	vmov.f32	s0, s13
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff2c 	bl	8001318 <PWMDuty>

	}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	42e20000 	.word	0x42e20000
 80014cc:	42e20000 	.word	0x42e20000
 80014d0:	40900000 	.word	0x40900000
 80014d4:	41280000 	.word	0x41280000
 80014d8:	42c80000 	.word	0x42c80000

080014dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x44>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_MspInit+0x44>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6613      	str	r3, [r2, #96]	; 0x60
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x44>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_MspInit+0x44>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x44>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6593      	str	r3, [r2, #88]	; 0x58
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x44>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a83      	ldr	r2, [pc, #524]	; (8001750 <HAL_ADC_MspInit+0x22c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d171      	bne.n	800162a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001546:	4b83      	ldr	r3, [pc, #524]	; (8001754 <HAL_ADC_MspInit+0x230>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a81      	ldr	r2, [pc, #516]	; (8001754 <HAL_ADC_MspInit+0x230>)
 800154e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001550:	4b80      	ldr	r3, [pc, #512]	; (8001754 <HAL_ADC_MspInit+0x230>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10b      	bne.n	8001570 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001558:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	4a7e      	ldr	r2, [pc, #504]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800155e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001564:	4b7c      	ldr	r3, [pc, #496]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800156c:	623b      	str	r3, [r7, #32]
 800156e:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001570:	4b79      	ldr	r3, [pc, #484]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	4a78      	ldr	r2, [pc, #480]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157c:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b73      	ldr	r3, [pc, #460]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a72      	ldr	r2, [pc, #456]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80015a0:	230a      	movs	r3, #10
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015a4:	230b      	movs	r3, #11
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	486a      	ldr	r0, [pc, #424]	; (800175c <HAL_ADC_MspInit+0x238>)
 80015b4:	f002 f85c 	bl	8003670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 80015b8:	2393      	movs	r3, #147	; 0x93
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015bc:	230b      	movs	r3, #11
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f002 f84f 	bl	8003670 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 80015d4:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_ADC_MspInit+0x240>)
 80015d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80015d8:	4b61      	ldr	r3, [pc, #388]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e4:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f0:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 80015f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 80015fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001600:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 8001602:	2220      	movs	r2, #32
 8001604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001606:	4b56      	ldr	r3, [pc, #344]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800160c:	4854      	ldr	r0, [pc, #336]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 800160e:	f001 fdf7 	bl	8003200 <HAL_DMA_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001618:	f7ff fe22 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a50      	ldr	r2, [pc, #320]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 8001620:	64da      	str	r2, [r3, #76]	; 0x4c
 8001622:	4a4f      	ldr	r2, [pc, #316]	; (8001760 <HAL_ADC_MspInit+0x23c>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001628:	e08e      	b.n	8001748 <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a4e      	ldr	r2, [pc, #312]	; (8001768 <HAL_ADC_MspInit+0x244>)
 8001630:	4293      	cmp	r3, r2
 8001632:	f040 8089 	bne.w	8001748 <HAL_ADC_MspInit+0x224>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_ADC_MspInit+0x230>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4a45      	ldr	r2, [pc, #276]	; (8001754 <HAL_ADC_MspInit+0x230>)
 800163e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001640:	4b44      	ldr	r3, [pc, #272]	; (8001754 <HAL_ADC_MspInit+0x230>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10b      	bne.n	8001660 <HAL_ADC_MspInit+0x13c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001648:	4b43      	ldr	r3, [pc, #268]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	4a42      	ldr	r2, [pc, #264]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800164e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001654:	4b40      	ldr	r3, [pc, #256]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001660:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	4a3c      	ldr	r2, [pc, #240]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	4a36      	ldr	r2, [pc, #216]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a30      	ldr	r2, [pc, #192]	; (8001758 <HAL_ADC_MspInit+0x234>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_ADC_MspInit+0x234>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5;
 80016a8:	2325      	movs	r3, #37	; 0x25
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ac:	230b      	movs	r3, #11
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	4828      	ldr	r0, [pc, #160]	; (800175c <HAL_ADC_MspInit+0x238>)
 80016bc:	f001 ffd8 	bl	8003670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016c0:	2360      	movs	r3, #96	; 0x60
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016c4:	230b      	movs	r3, #11
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f001 ffcb 	bl	8003670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016da:	2301      	movs	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016de:	230b      	movs	r3, #11
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	481f      	ldr	r0, [pc, #124]	; (800176c <HAL_ADC_MspInit+0x248>)
 80016ee:	f001 ffbf 	bl	8003670 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 80016f4:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_ADC_MspInit+0x250>)
 80016f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 800171a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 8001722:	2220      	movs	r2, #32
 8001724:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 800172e:	f001 fd67 	bl	8003200 <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8001738:	f7ff fd92 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 8001740:	64da      	str	r2, [r3, #76]	; 0x4c
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_ADC_MspInit+0x24c>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001748:	bf00      	nop
 800174a:	3738      	adds	r7, #56	; 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	50040000 	.word	0x50040000
 8001754:	20000028 	.word	0x20000028
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800
 8001760:	20000254 	.word	0x20000254
 8001764:	40020008 	.word	0x40020008
 8001768:	50040100 	.word	0x50040100
 800176c:	48000400 	.word	0x48000400
 8001770:	2000042c 	.word	0x2000042c
 8001774:	4002001c 	.word	0x4002001c

08001778 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10c      	bne.n	80017a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_TIM_PWM_MspInit+0x60>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_TIM_PWM_MspInit+0x60>)
 8001790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001794:	6613      	str	r3, [r2, #96]	; 0x60
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_TIM_PWM_MspInit+0x60>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017a2:	e010      	b.n	80017c6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <HAL_TIM_PWM_MspInit+0x64>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10b      	bne.n	80017c6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_TIM_PWM_MspInit+0x60>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_TIM_PWM_MspInit+0x60>)
 80017b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_TIM_PWM_MspInit+0x60>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40013400 	.word	0x40013400

080017e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_TIM_Base_MspInit+0x44>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d113      	bne.n	800181a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_TIM_Base_MspInit+0x48>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <HAL_TIM_Base_MspInit+0x48>)
 80017f8:	f043 0320 	orr.w	r3, r3, #32
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_TIM_Base_MspInit+0x48>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2104      	movs	r1, #4
 800180e:	2037      	movs	r0, #55	; 0x37
 8001810:	f001 fcbf 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001814:	2037      	movs	r0, #55	; 0x37
 8001816:	f001 fcd8 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40001400 	.word	0x40001400
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_TIM_MspPostInit+0xac>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11e      	bne.n	800188c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_TIM_MspPostInit+0xb0>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a22      	ldr	r2, [pc, #136]	; (80018dc <HAL_TIM_MspPostInit+0xb0>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_TIM_MspPostInit+0xb0>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001866:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001878:	2301      	movs	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f001 fef3 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800188a:	e021      	b.n	80018d0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_TIM_MspPostInit+0xb4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11c      	bne.n	80018d0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_TIM_MspPostInit+0xb0>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_TIM_MspPostInit+0xb0>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_TIM_MspPostInit+0xb0>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80018ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018c0:	2303      	movs	r3, #3
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <HAL_TIM_MspPostInit+0xb8>)
 80018cc:	f001 fed0 	bl	8003670 <HAL_GPIO_Init>
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40012c00 	.word	0x40012c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40013400 	.word	0x40013400
 80018e4:	48000800 	.word	0x48000800

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a4b      	ldr	r2, [pc, #300]	; (8001a34 <HAL_UART_MspInit+0x14c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d131      	bne.n	800196e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <HAL_UART_MspInit+0x150>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a4a      	ldr	r2, [pc, #296]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a44      	ldr	r2, [pc, #272]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800193a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800194c:	2308      	movs	r3, #8
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4839      	ldr	r0, [pc, #228]	; (8001a3c <HAL_UART_MspInit+0x154>)
 8001958:	f001 fe8a 	bl	8003670 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2034      	movs	r0, #52	; 0x34
 8001962:	f001 fc16 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001966:	2034      	movs	r0, #52	; 0x34
 8001968:	f001 fc2f 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196c:	e05e      	b.n	8001a2c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a33      	ldr	r2, [pc, #204]	; (8001a40 <HAL_UART_MspInit+0x158>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d159      	bne.n	8001a2c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_UART_MspInit+0x150>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	4a2e      	ldr	r2, [pc, #184]	; (8001a38 <HAL_UART_MspInit+0x150>)
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	6593      	str	r3, [r2, #88]	; 0x58
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_UART_MspInit+0x150>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_UART_MspInit+0x150>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a8:	230c      	movs	r3, #12
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b8:	2307      	movs	r3, #7
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f001 fe53 	bl	8003670 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_UART_MspInit+0x160>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019d8:	2210      	movs	r2, #16
 80019da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019f6:	2220      	movs	r2, #32
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 8001a02:	f001 fbfd 	bl	8003200 <HAL_DMA_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8001a0c:	f7ff fc28 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 8001a14:	669a      	str	r2, [r3, #104]	; 0x68
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_UART_MspInit+0x15c>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2026      	movs	r0, #38	; 0x26
 8001a22:	f001 fbb6 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a26:	2026      	movs	r0, #38	; 0x26
 8001a28:	f001 fbcf 	bl	80031ca <HAL_NVIC_EnableIRQ>
}
 8001a2c:	bf00      	nop
 8001a2e:	3730      	adds	r7, #48	; 0x30
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40004c00 	.word	0x40004c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000800 	.word	0x48000800
 8001a40:	40004400 	.word	0x40004400
 8001a44:	200001d8 	.word	0x200001d8
 8001a48:	40020080 	.word	0x40020080

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa0:	f000 f96c 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA1_Channel1_IRQHandler+0x10>)
 8001aae:	f001 fd00 	bl	80034b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000254 	.word	0x20000254

08001abc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA1_Channel2_IRQHandler+0x10>)
 8001ac2:	f001 fcf6 	bl	80034b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000042c 	.word	0x2000042c

08001ad0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <DMA1_Channel7_IRQHandler+0x10>)
 8001ad6:	f001 fcec 	bl	80034b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001d8 	.word	0x200001d8

08001ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <USART2_IRQHandler+0x10>)
 8001aea:	f004 fbe9 	bl	80062c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200003ac 	.word	0x200003ac

08001af8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <UART4_IRQHandler+0x10>)
 8001afe:	f004 fbdf 	bl	80062c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000032c 	.word	0x2000032c

08001b0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <TIM7_IRQHandler+0x14>)
 8001b12:	f003 fb2d 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  Inter();
 8001b16:	f7ff fb1f 	bl	8001158 <Inter>

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000498 	.word	0x20000498

08001b24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <SystemInit+0x64>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <SystemInit+0x64>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <SystemInit+0x68>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <SystemInit+0x68>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <SystemInit+0x68>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <SystemInit+0x68>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <SystemInit+0x68>)
 8001b50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <SystemInit+0x68>)
 8001b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <SystemInit+0x68>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <SystemInit+0x68>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <SystemInit+0x68>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SystemInit+0x64>)
 8001b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00
 8001b8c:	40021000 	.word	0x40021000

08001b90 <TimerInterruptInit>:
	 * Argument 3: Timer Handle Type Def, example: &htim7
	 * Argument 4: Timer Clock Speed: 80000000
	 * Argument 5: Sampling time/time between successive interrupts in microseconds, example: 500
	 */

	{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]

		interrupt->timerNr = timeNr;						//Writes the timer number to the structure
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	615a      	str	r2, [r3, #20]
		interrupt->htim	= TmrHandle;						//Writes the timer handle to the structure
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]
		interrupt->Timer_Clock_Speed = tmrclkspd;			//Writes the timer clock speed to the structure
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
		interrupt->Interrupt_Frequency = sampling_time;		//Writes the Sampling time/time between interrupts to the structure
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	605a      	str	r2, [r3, #4]


		UpdateInterruptTime (interrupt, sampling_time);		//Call the update interrupt time function to enter the values of the prescaler and counter resolution
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f805 	bl	8001bc8 <UpdateInterruptTime>

	}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <UpdateInterruptTime>:
	 * Inputs:
	 * Argument 1: INTERRUPT struct, named based on the interrupt name, example: ControllerInterrupt
	 * Argument 2: Sampling time/time between successive interrupts in microseconds, example: 500
	 */

{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	interrupt->Interrupt_Frequency = sampling_time;		//Writes the sampling time to the structure
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	605a      	str	r2, [r3, #4]

	if(interrupt->Interrupt_Frequency > 65535)			//The maximum counter resolution is 65535, if the sampling time is greater than this, we need to adjust the prescaler
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d314      	bcc.n	8001c0c <UpdateInterruptTime+0x44>
	{
		interrupt->Counter_Resolution = 65535;			//Fix the resolution to the maximum 16 bits possible
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be8:	609a      	str	r2, [r3, #8]
		interrupt->Prescaler = ((interrupt->Interrupt_Frequency)*(interrupt->Timer_Clock_Speed/1000000))/(interrupt->Counter_Resolution);	//Calculate prescaler value, brackets are very important
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4918      	ldr	r1, [pc, #96]	; (8001c54 <UpdateInterruptTime+0x8c>)
 8001bf4:	fba1 1202 	umull	r1, r2, r1, r2
 8001bf8:	0c92      	lsrs	r2, r2, #18
 8001bfa:	fb02 f203 	mul.w	r2, r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e012      	b.n	8001c32 <UpdateInterruptTime+0x6a>

	}

	else
	{
		interrupt->Counter_Resolution = 80;			//Fix the resolution to 80 to get the minimum possible  resolution of 1 micro-second
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2250      	movs	r2, #80	; 0x50
 8001c10:	609a      	str	r2, [r3, #8]
		interrupt->Prescaler = (interrupt->Interrupt_Frequency)*((interrupt->Timer_Clock_Speed/1000000)/((interrupt->Counter_Resolution)));	//Calculate prescaler value, brackets are very important
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <UpdateInterruptTime+0x8c>)
 8001c1c:	fba1 1202 	umull	r1, r2, r1, r2
 8001c20:	0c91      	lsrs	r1, r2, #18
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6892      	ldr	r2, [r2, #8]
 8001c26:	fbb1 f2f2 	udiv	r2, r1, r2
 8001c2a:	fb02 f203 	mul.w	r2, r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]

	}

	interrupt->timerNr->PSC = interrupt->Prescaler;					//Write the prescaler to the timer control register
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68d2      	ldr	r2, [r2, #12]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
	interrupt->timerNr->ARR = interrupt->Counter_Resolution-1;	//Write the counter resolution resolution to the timer auto reload register
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	3a01      	subs	r2, #1
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <StartInterrupt>:
	 *
	 * Input:
	 * Argument 1: INTERRUPT struct, named based on the interrupt name, example: ControllerInterrupt
	 */

	{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

		HAL_TIM_Base_Start_IT(interrupt->htim);			//Start the timer
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f9d5 	bl	8005014 <HAL_TIM_Base_Start_IT>

	}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c7a:	e003      	b.n	8001c84 <LoopCopyDataInit>

08001c7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c82:	3104      	adds	r1, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c84:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c8c:	d3f6      	bcc.n	8001c7c <CopyDataInit>
	ldr	r2, =_sbss
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c90:	e002      	b.n	8001c98 <LoopFillZerobss>

08001c92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c94:	f842 3b04 	str.w	r3, [r2], #4

08001c98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <LoopForever+0x16>)
	cmp	r2, r3
 8001c9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c9c:	d3f9      	bcc.n	8001c92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c9e:	f7ff ff41 	bl	8001b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f005 fa49 	bl	8007138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ca6:	f7fe fc67 	bl	8000578 <main>

08001caa <LoopForever>:

LoopForever:
    b LoopForever
 8001caa:	e7fe      	b.n	8001caa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001cb0:	08007200 	.word	0x08007200
	ldr	r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cb8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001cbc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001cc0:	20000520 	.word	0x20000520

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_Init+0x3c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_Init+0x3c>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f001 fa4c 	bl	800317c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 f80f 	bl	8001d08 <HAL_InitTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	e001      	b.n	8001cfa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf6:	f7ff fbf1 	bl	80014dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40022000 	.word	0x40022000

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_InitTick+0x68>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d022      	beq.n	8001d62 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_InitTick+0x6c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_InitTick+0x68>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fa58 	bl	80031e6 <HAL_SYSTICK_Config>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10f      	bne.n	8001d5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	d809      	bhi.n	8001d56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d42:	2200      	movs	r2, #0
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4a:	f001 fa22 	bl	8003192 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_InitTick+0x70>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e007      	b.n	8001d66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e004      	b.n	8001d66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x20>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d8c:	6013      	str	r3, [r2, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	2000051c 	.word	0x2000051c
 8001d9c:	20000008 	.word	0x20000008

08001da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_GetTick+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	2000051c 	.word	0x2000051c

08001db8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e20:	b490      	push	{r4, r7}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3360      	adds	r3, #96	; 0x60
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <LL_ADC_SetOffset+0x40>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e52:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc90      	pop	{r4, r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	03fff000 	.word	0x03fff000

08001e64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e64:	b490      	push	{r4, r7}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3360      	adds	r3, #96	; 0x60
 8001e72:	461a      	mov	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc90      	pop	{r4, r7}
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e8c:	b490      	push	{r4, r7}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3360      	adds	r3, #96	; 0x60
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc90      	pop	{r4, r7}
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ee2:	b490      	push	{r4, r7}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3330      	adds	r3, #48	; 0x30
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	4413      	add	r3, r2
 8001f00:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f02:	6822      	ldr	r2, [r4, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	211f      	movs	r1, #31
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0e9b      	lsrs	r3, r3, #26
 8001f18:	f003 011f 	and.w	r1, r3, #31
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc90      	pop	{r4, r7}
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f34:	b490      	push	{r4, r7}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3314      	adds	r3, #20
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0e5b      	lsrs	r3, r3, #25
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f54:	6822      	ldr	r2, [r4, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0d1b      	lsrs	r3, r3, #20
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2107      	movs	r1, #7
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0d1b      	lsrs	r3, r3, #20
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc90      	pop	{r4, r7}
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0318 	and.w	r3, r3, #24
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fa8:	40d9      	lsrs	r1, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	400b      	ands	r3, r1
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	0007ffff 	.word	0x0007ffff

08001fcc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6093      	str	r3, [r2, #8]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800201c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002020:	d101      	bne.n	8002026 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002048:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002070:	d101      	bne.n	8002076 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <LL_ADC_IsEnabled+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_IsEnabled+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e6:	f043 0204 	orr.w	r2, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d101      	bne.n	8002112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b08      	cmp	r3, #8
 8002132:	d101      	bne.n	8002138 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e134      	b.n	80023cc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff f9d7 	bl	8001524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff3f 	bl	800200c <LL_ADC_IsDeepPowerDownEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff25 	bl	8001fe8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff5a 	bl	800205c <LL_ADC_IsInternalRegulatorEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d113      	bne.n	80021d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff3e 	bl	8002034 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021b8:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <HAL_ADC_Init+0x28c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	4a86      	ldr	r2, [pc, #536]	; (80023d8 <HAL_ADC_Init+0x290>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021c8:	e002      	b.n	80021d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff3e 	bl	800205c <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff77 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 800220c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 80cf 	bne.w	80023ba <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80cb 	bne.w	80023ba <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800222c:	f043 0202 	orr.w	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff37 	bl	80020ac <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d115      	bne.n	8002270 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002244:	4865      	ldr	r0, [pc, #404]	; (80023dc <HAL_ADC_Init+0x294>)
 8002246:	f7ff ff31 	bl	80020ac <LL_ADC_IsEnabled>
 800224a:	4604      	mov	r4, r0
 800224c:	4864      	ldr	r0, [pc, #400]	; (80023e0 <HAL_ADC_Init+0x298>)
 800224e:	f7ff ff2d 	bl	80020ac <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	431c      	orrs	r4, r3
 8002256:	4863      	ldr	r0, [pc, #396]	; (80023e4 <HAL_ADC_Init+0x29c>)
 8002258:	f7ff ff28 	bl	80020ac <LL_ADC_IsEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	4323      	orrs	r3, r4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4619      	mov	r1, r3
 800226a:	485f      	ldr	r0, [pc, #380]	; (80023e8 <HAL_ADC_Init+0x2a0>)
 800226c:	f7ff fda4 	bl	8001db8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e5b      	ldrb	r3, [r3, #25]
 8002274:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800227a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002280:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002286:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d106      	bne.n	80022ac <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	3b01      	subs	r3, #1
 80022a4:	045b      	lsls	r3, r3, #17
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_ADC_Init+0x2a4>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff0a 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 80022e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff17 	bl	8002120 <LL_ADC_INJ_IsConversionOngoing>
 80022f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d13d      	bne.n	8002376 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d13a      	bne.n	8002376 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002304:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231c:	f023 0302 	bic.w	r3, r3, #2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	69b9      	ldr	r1, [r7, #24]
 8002326:	430b      	orrs	r3, r1
 8002328:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002330:	2b01      	cmp	r3, #1
 8002332:	d118      	bne.n	8002366 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800233e:	f023 0304 	bic.w	r3, r3, #4
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002356:	430a      	orrs	r2, r1
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	e007      	b.n	8002376 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10c      	bne.n	8002398 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f023 010f 	bic.w	r1, r3, #15
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
 8002396:	e007      	b.n	80023a8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 020f 	bic.w	r2, r2, #15
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f023 0303 	bic.w	r3, r3, #3
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
 80023b8:	e007      	b.n	80023ca <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3724      	adds	r7, #36	; 0x24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	20000000 	.word	0x20000000
 80023d8:	053e2d63 	.word	0x053e2d63
 80023dc:	50040000 	.word	0x50040000
 80023e0:	50040100 	.word	0x50040100
 80023e4:	50040200 	.word	0x50040200
 80023e8:	50040300 	.word	0x50040300
 80023ec:	fff0c007 	.word	0xfff0c007

080023f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023fc:	4850      	ldr	r0, [pc, #320]	; (8002540 <HAL_ADC_Start_DMA+0x150>)
 80023fe:	f7ff fde5 	bl	8001fcc <LL_ADC_GetMultimode>
 8002402:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fe76 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 808e 	bne.w	8002532 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_ADC_Start_DMA+0x34>
 8002420:	2302      	movs	r3, #2
 8002422:	e089      	b.n	8002538 <HAL_ADC_Start_DMA+0x148>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d002      	beq.n	800243e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b09      	cmp	r3, #9
 800243c:	d172      	bne.n	8002524 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fc0c 	bl	8002c5c <ADC_Enable>
 8002444:	4603      	mov	r3, r0
 8002446:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d165      	bne.n	800251a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a37      	ldr	r2, [pc, #220]	; (8002544 <HAL_ADC_Start_DMA+0x154>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d002      	beq.n	8002472 <HAL_ADC_Start_DMA+0x82>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	e000      	b.n	8002474 <HAL_ADC_Start_DMA+0x84>
 8002472:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_ADC_Start_DMA+0x158>)
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	4293      	cmp	r3, r2
 800247a:	d002      	beq.n	8002482 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	f023 0206 	bic.w	r2, r3, #6
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	659a      	str	r2, [r3, #88]	; 0x58
 80024a6:	e002      	b.n	80024ae <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a26      	ldr	r2, [pc, #152]	; (800254c <HAL_ADC_Start_DMA+0x15c>)
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a25      	ldr	r2, [pc, #148]	; (8002550 <HAL_ADC_Start_DMA+0x160>)
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	4a24      	ldr	r2, [pc, #144]	; (8002554 <HAL_ADC_Start_DMA+0x164>)
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	221c      	movs	r2, #28
 80024cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0210 	orr.w	r2, r2, #16
 80024e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3340      	adds	r3, #64	; 0x40
 8002500:	4619      	mov	r1, r3
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f000 ff33 	bl	8003370 <HAL_DMA_Start_IT>
 800250a:	4603      	mov	r3, r0
 800250c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fddd 	bl	80020d2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002518:	e00d      	b.n	8002536 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002522:	e008      	b.n	8002536 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002530:	e001      	b.n	8002536 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002536:	7dfb      	ldrb	r3, [r7, #23]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	50040300 	.word	0x50040300
 8002544:	50040100 	.word	0x50040100
 8002548:	50040000 	.word	0x50040000
 800254c:	08002d11 	.word	0x08002d11
 8002550:	08002de9 	.word	0x08002de9
 8002554:	08002e05 	.word	0x08002e05

08002558 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0a6      	sub	sp, #152	; 0x98
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x22>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e348      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x6b4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fd99 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 8329 	bne.w	8002c22 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d824      	bhi.n	8002622 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	3b02      	subs	r3, #2
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d81b      	bhi.n	800261a <HAL_ADC_ConfigChannel+0x86>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_ADC_ConfigChannel+0x54>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	080025f9 	.word	0x080025f9
 80025ec:	08002601 	.word	0x08002601
 80025f0:	08002609 	.word	0x08002609
 80025f4:	08002611 	.word	0x08002611
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	220c      	movs	r2, #12
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	e011      	b.n	8002624 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2212      	movs	r2, #18
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	e00d      	b.n	8002624 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2218      	movs	r2, #24
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e009      	b.n	8002624 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	e004      	b.n	8002624 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2206      	movs	r2, #6
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	e000      	b.n	8002624 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002622:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	f7ff fc56 	bl	8001ee2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fd5d 	bl	80020fa <LL_ADC_REG_IsConversionOngoing>
 8002640:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fd69 	bl	8002120 <LL_ADC_INJ_IsConversionOngoing>
 800264e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 8148 	bne.w	80028ec <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800265c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002660:	2b00      	cmp	r3, #0
 8002662:	f040 8143 	bne.w	80028ec <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	461a      	mov	r2, r3
 8002674:	f7ff fc5e 	bl	8001f34 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	08db      	lsrs	r3, r3, #3
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d00a      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026aa:	f7ff fbb9 	bl	8001e20 <LL_ADC_SetOffset>
 80026ae:	e11d      	b.n	80028ec <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fbd4 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x148>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fbc9 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	f003 021f 	and.w	r2, r3, #31
 80026da:	e012      	b.n	8002702 <HAL_ADC_ConfigChannel+0x16e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fbbe 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x186>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e00a      	b.n	8002730 <HAL_ADC_ConfigChannel+0x19c>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	429a      	cmp	r2, r3
 8002732:	d106      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fba5 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fb8b 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_ADC_ConfigChannel+0x1da>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fb80 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	e010      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1fc>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fb75 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x214>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	e00a      	b.n	80027be <HAL_ADC_ConfigChannel+0x22a>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	429a      	cmp	r2, r3
 80027c0:	d106      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fb5e 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fb44 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x268>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fb39 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 021f 	and.w	r2, r3, #31
 80027fa:	e010      	b.n	800281e <HAL_ADC_ConfigChannel+0x28a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb2e 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x2a2>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	e00a      	b.n	800284c <HAL_ADC_ConfigChannel+0x2b8>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	429a      	cmp	r2, r3
 800284e:	d106      	bne.n	800285e <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	2102      	movs	r1, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fb17 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2103      	movs	r1, #3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fafd 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <HAL_ADC_ConfigChannel+0x2f6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2103      	movs	r1, #3
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff faf2 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	e010      	b.n	80028ac <HAL_ADC_ConfigChannel+0x318>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2103      	movs	r1, #3
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fae7 	bl	8001e64 <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x330>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e00a      	b.n	80028da <HAL_ADC_ConfigChannel+0x346>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80028d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	429a      	cmp	r2, r3
 80028dc:	d106      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2103      	movs	r1, #3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fad0 	bl	8001e8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fbdb 	bl	80020ac <LL_ADC_IsEnabled>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 810c 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f7ff fb3a 	bl	8001f84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4aad      	ldr	r2, [pc, #692]	; (8002bcc <HAL_ADC_ConfigChannel+0x638>)
 8002916:	4293      	cmp	r3, r2
 8002918:	f040 80fd 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x3b0>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	3301      	adds	r3, #1
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2b09      	cmp	r3, #9
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e012      	b.n	800296a <HAL_ADC_ConfigChannel+0x3d6>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2b09      	cmp	r3, #9
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296a:	2b00      	cmp	r3, #0
 800296c:	d064      	beq.n	8002a38 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <HAL_ADC_ConfigChannel+0x3f6>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	3301      	adds	r3, #1
 8002982:	069b      	lsls	r3, r3, #26
 8002984:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002988:	e00e      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x414>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	069b      	lsls	r3, r3, #26
 80029a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x434>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	e010      	b.n	80029ea <HAL_ADC_ConfigChannel+0x456>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	ea42 0103 	orr.w	r1, r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x47c>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 021f 	and.w	r2, r3, #31
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	051b      	lsls	r3, r3, #20
 8002a0e:	e011      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x4a0>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a34:	430b      	orrs	r3, r1
 8002a36:	e069      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x4c0>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	069b      	lsls	r3, r3, #26
 8002a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a52:	e00e      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x4de>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	61fb      	str	r3, [r7, #28]
  return result;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	069b      	lsls	r3, r3, #26
 8002a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x4fe>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	0e9b      	lsrs	r3, r3, #26
 8002a84:	3301      	adds	r3, #1
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	e010      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x520>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	617b      	str	r3, [r7, #20]
  return result;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	ea42 0103 	orr.w	r1, r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x54c>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	3301      	adds	r3, #1
 8002acc:	f003 021f 	and.w	r2, r3, #31
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b1e      	subs	r3, #30
 8002ad8:	051b      	lsls	r3, r3, #20
 8002ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ade:	e014      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x576>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	60fb      	str	r3, [r7, #12]
  return result;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	3b1e      	subs	r3, #30
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7ff fa0f 	bl	8001f34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_ADC_ConfigChannel+0x63c>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 808c 	beq.w	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b24:	482b      	ldr	r0, [pc, #172]	; (8002bd4 <HAL_ADC_ConfigChannel+0x640>)
 8002b26:	f7ff f96d 	bl	8001e04 <LL_ADC_GetCommonPathInternalCh>
 8002b2a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <HAL_ADC_ConfigChannel+0x644>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d12b      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x5fc>
 8002b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d125      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <HAL_ADC_ConfigChannel+0x648>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_ADC_ConfigChannel+0x5c4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_ADC_ConfigChannel+0x64c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d16e      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b60:	4619      	mov	r1, r3
 8002b62:	481c      	ldr	r0, [pc, #112]	; (8002bd4 <HAL_ADC_ConfigChannel+0x640>)
 8002b64:	f7ff f93b 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b68:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_ADC_ConfigChannel+0x650>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_ADC_ConfigChannel+0x654>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099a      	lsrs	r2, r3, #6
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b80:	e002      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f9      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b8e:	e052      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <HAL_ADC_ConfigChannel+0x658>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x65c>
 8002b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d124      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <HAL_ADC_ConfigChannel+0x648>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_ADC_ConfigChannel+0x626>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <HAL_ADC_ConfigChannel+0x64c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d13f      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <HAL_ADC_ConfigChannel+0x640>)
 8002bc6:	f7ff f90a 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bca:	e036      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x6a6>
 8002bcc:	407f0000 	.word	0x407f0000
 8002bd0:	80080000 	.word	0x80080000
 8002bd4:	50040300 	.word	0x50040300
 8002bd8:	c7520000 	.word	0xc7520000
 8002bdc:	50040000 	.word	0x50040000
 8002be0:	50040200 	.word	0x50040200
 8002be4:	20000000 	.word	0x20000000
 8002be8:	053e2d63 	.word	0x053e2d63
 8002bec:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <HAL_ADC_ConfigChannel+0x6bc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d120      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11a      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_ADC_ConfigChannel+0x6c0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d115      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480f      	ldr	r0, [pc, #60]	; (8002c58 <HAL_ADC_ConfigChannel+0x6c4>)
 8002c1c:	f7ff f8df 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
 8002c20:	e00c      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c3a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3798      	adds	r7, #152	; 0x98
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	80000001 	.word	0x80000001
 8002c54:	50040000 	.word	0x50040000
 8002c58:	50040300 	.word	0x50040300

08002c5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fa1f 	bl	80020ac <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d146      	bne.n	8002d02 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <ADC_Enable+0xb0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e032      	b.n	8002d04 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f9ee 	bl	8002084 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca8:	f7ff f87a 	bl	8001da0 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cae:	e021      	b.n	8002cf4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f9f9 	bl	80020ac <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f9dd 	bl	8002084 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cca:	f7ff f869 	bl	8001da0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d90d      	bls.n	8002cf4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	f043 0210 	orr.w	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d1d6      	bne.n	8002cb0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	8000003f 	.word	0x8000003f

08002d10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d14b      	bne.n	8002dc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d021      	beq.n	8002d88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f8b7 	bl	8001ebc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d032      	beq.n	8002dba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d12b      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11f      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
 8002d86:	e018      	b.n	8002dba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d111      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff fbcc 	bl	8002558 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dc0:	e00e      	b.n	8002de0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fbd6 	bl	8002580 <HAL_ADC_ErrorCallback>
}
 8002dd4:	e004      	b.n	8002de0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fbb8 	bl	800256c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff fba8 	bl	8002580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <LL_ADC_IsEnabled>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <LL_ADC_IsEnabled+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_ADC_IsEnabled+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d101      	bne.n	8002e76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b09f      	sub	sp, #124	; 0x7c
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e08f      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	e001      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e072      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ffbd 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 8002ee4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ffb7 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d154      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d151      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002efe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02c      	beq.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f1a:	035b      	lsls	r3, r3, #13
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f24:	4829      	ldr	r0, [pc, #164]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f26:	f7ff ff87 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4828      	ldr	r0, [pc, #160]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f2e:	f7ff ff83 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	431c      	orrs	r4, r3
 8002f36:	4828      	ldr	r0, [pc, #160]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f38:	f7ff ff7e 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4323      	orrs	r3, r4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d137      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f4c:	f023 030f 	bic.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	6811      	ldr	r1, [r2, #0]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	6892      	ldr	r2, [r2, #8]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f60:	e028      	b.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6e:	4817      	ldr	r0, [pc, #92]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f70:	f7ff ff62 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f74:	4604      	mov	r4, r0
 8002f76:	4816      	ldr	r0, [pc, #88]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f78:	f7ff ff5e 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	431c      	orrs	r4, r3
 8002f80:	4815      	ldr	r0, [pc, #84]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f82:	f7ff ff59 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4323      	orrs	r3, r4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d112      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f96:	f023 030f 	bic.w	r3, r3, #15
 8002f9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f9e:	e009      	b.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	377c      	adds	r7, #124	; 0x7c
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	50040000 	.word	0x50040000
 8002fd0:	50040100 	.word	0x50040100
 8002fd4:	50040300 	.word	0x50040300
 8002fd8:	50040200 	.word	0x50040200

08002fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300e:	4a04      	ldr	r2, [pc, #16]	; (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	60d3      	str	r3, [r2, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <__NVIC_GetPriorityGrouping+0x18>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0307 	and.w	r3, r3, #7
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	2b00      	cmp	r3, #0
 8003050:	db0b      	blt.n	800306a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4907      	ldr	r1, [pc, #28]	; (8003078 <__NVIC_EnableIRQ+0x38>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2001      	movs	r0, #1
 8003062:	fa00 f202 	lsl.w	r2, r0, r2
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000e100 	.word	0xe000e100

0800307c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	2b00      	cmp	r3, #0
 800308e:	db0a      	blt.n	80030a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	490c      	ldr	r1, [pc, #48]	; (80030c8 <__NVIC_SetPriority+0x4c>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	440b      	add	r3, r1
 80030a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a4:	e00a      	b.n	80030bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4908      	ldr	r1, [pc, #32]	; (80030cc <__NVIC_SetPriority+0x50>)
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	3b04      	subs	r3, #4
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	440b      	add	r3, r1
 80030ba:	761a      	strb	r2, [r3, #24]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f1c3 0307 	rsb	r3, r3, #7
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	bf28      	it	cs
 80030ee:	2304      	movcs	r3, #4
 80030f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	d902      	bls.n	8003100 <NVIC_EncodePriority+0x30>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3b03      	subs	r3, #3
 80030fe:	e000      	b.n	8003102 <NVIC_EncodePriority+0x32>
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	401a      	ands	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003118:	f04f 31ff 	mov.w	r1, #4294967295
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43d9      	mvns	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	4313      	orrs	r3, r2
         );
}
 800312a:	4618      	mov	r0, r3
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003148:	d301      	bcc.n	800314e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314a:	2301      	movs	r3, #1
 800314c:	e00f      	b.n	800316e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <SysTick_Config+0x40>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003156:	210f      	movs	r1, #15
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	f7ff ff8e 	bl	800307c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <SysTick_Config+0x40>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <SysTick_Config+0x40>)
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000e010 	.word	0xe000e010

0800317c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff29 	bl	8002fdc <__NVIC_SetPriorityGrouping>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a4:	f7ff ff3e 	bl	8003024 <__NVIC_GetPriorityGrouping>
 80031a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff ff8e 	bl	80030d0 <NVIC_EncodePriority>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff5d 	bl	800307c <__NVIC_SetPriority>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff31 	bl	8003040 <__NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ffa2 	bl	8003138 <SysTick_Config>
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e098      	b.n	8003344 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_DMA_Init+0x150>)
 800321a:	429a      	cmp	r2, r3
 800321c:	d80f      	bhi.n	800323e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_DMA_Init+0x154>)
 8003226:	4413      	add	r3, r2
 8003228:	4a4b      	ldr	r2, [pc, #300]	; (8003358 <HAL_DMA_Init+0x158>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	009a      	lsls	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a48      	ldr	r2, [pc, #288]	; (800335c <HAL_DMA_Init+0x15c>)
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
 800323c:	e00e      	b.n	800325c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	4b46      	ldr	r3, [pc, #280]	; (8003360 <HAL_DMA_Init+0x160>)
 8003246:	4413      	add	r3, r2
 8003248:	4a43      	ldr	r2, [pc, #268]	; (8003358 <HAL_DMA_Init+0x158>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_DMA_Init+0x164>)
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b6:	d039      	beq.n	800332c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	4a27      	ldr	r2, [pc, #156]	; (800335c <HAL_DMA_Init+0x15c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d11a      	bne.n	80032f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <HAL_DMA_Init+0x168>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 031c 	and.w	r3, r3, #28
 80032ce:	210f      	movs	r1, #15
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4924      	ldr	r1, [pc, #144]	; (8003368 <HAL_DMA_Init+0x168>)
 80032d8:	4013      	ands	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_DMA_Init+0x168>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f003 031c 	and.w	r3, r3, #28
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	491d      	ldr	r1, [pc, #116]	; (8003368 <HAL_DMA_Init+0x168>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
 80032f6:	e019      	b.n	800332c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_DMA_Init+0x16c>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	f003 031c 	and.w	r3, r3, #28
 8003304:	210f      	movs	r1, #15
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	4917      	ldr	r1, [pc, #92]	; (800336c <HAL_DMA_Init+0x16c>)
 800330e:	4013      	ands	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003312:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_DMA_Init+0x16c>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f003 031c 	and.w	r3, r3, #28
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	4911      	ldr	r1, [pc, #68]	; (800336c <HAL_DMA_Init+0x16c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40020407 	.word	0x40020407
 8003354:	bffdfff8 	.word	0xbffdfff8
 8003358:	cccccccd 	.word	0xcccccccd
 800335c:	40020000 	.word	0x40020000
 8003360:	bffdfbf8 	.word	0xbffdfbf8
 8003364:	40020400 	.word	0x40020400
 8003368:	400200a8 	.word	0x400200a8
 800336c:	400204a8 	.word	0x400204a8

08003370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_DMA_Start_IT+0x20>
 800338c:	2302      	movs	r3, #2
 800338e:	e04b      	b.n	8003428 <HAL_DMA_Start_IT+0xb8>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d13a      	bne.n	800341a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f921 	bl	8003610 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 020e 	orr.w	r2, r2, #14
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e00f      	b.n	8003408 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 020a 	orr.w	r2, r2, #10
 8003406:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e005      	b.n	8003426 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003422:	2302      	movs	r3, #2
 8003424:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003426:	7dfb      	ldrb	r3, [r7, #23]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d005      	beq.n	8003454 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2204      	movs	r2, #4
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e029      	b.n	80034a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 020e 	bic.w	r2, r2, #14
 8003462:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	f003 021c 	and.w	r2, r3, #28
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f202 	lsl.w	r2, r1, r2
 8003486:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
    }
  }
  return status;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f003 031c 	and.w	r3, r3, #28
 80034d2:	2204      	movs	r2, #4
 80034d4:	409a      	lsls	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d026      	beq.n	800352c <HAL_DMA_IRQHandler+0x7a>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0204 	bic.w	r2, r2, #4
 8003504:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f003 021c 	and.w	r2, r3, #28
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2104      	movs	r1, #4
 8003514:	fa01 f202 	lsl.w	r2, r1, r2
 8003518:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	2b00      	cmp	r3, #0
 8003520:	d071      	beq.n	8003606 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800352a:	e06c      	b.n	8003606 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f003 031c 	and.w	r3, r3, #28
 8003534:	2202      	movs	r2, #2
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02e      	beq.n	800359e <HAL_DMA_IRQHandler+0xec>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d029      	beq.n	800359e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 020a 	bic.w	r2, r2, #10
 8003566:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	f003 021c 	and.w	r2, r3, #28
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	2102      	movs	r1, #2
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d038      	beq.n	8003606 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800359c:	e033      	b.n	8003606 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 031c 	and.w	r3, r3, #28
 80035a6:	2208      	movs	r2, #8
 80035a8:	409a      	lsls	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d02a      	beq.n	8003608 <HAL_DMA_IRQHandler+0x156>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d025      	beq.n	8003608 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 020e 	bic.w	r2, r2, #14
 80035ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f003 021c 	and.w	r2, r3, #28
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003606:	bf00      	nop
 8003608:	bf00      	nop
}
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f003 021c 	and.w	r2, r3, #28
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2101      	movs	r1, #1
 800362c:	fa01 f202 	lsl.w	r2, r1, r2
 8003630:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b10      	cmp	r3, #16
 8003640:	d108      	bne.n	8003654 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003652:	e007      	b.n	8003664 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367e:	e17f      	b.n	8003980 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8171 	beq.w	800397a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d00b      	beq.n	80036b8 <HAL_GPIO_Init+0x48>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d007      	beq.n	80036b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ac:	2b11      	cmp	r3, #17
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b12      	cmp	r3, #18
 80036b6:	d130      	bne.n	800371a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ee:	2201      	movs	r2, #1
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 0201 	and.w	r2, r3, #1
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b03      	cmp	r3, #3
 8003724:	d118      	bne.n	8003758 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800372c:	2201      	movs	r2, #1
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f003 0201 	and.w	r2, r3, #1
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2203      	movs	r2, #3
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x128>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b12      	cmp	r3, #18
 8003796:	d123      	bne.n	80037e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	08da      	lsrs	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3208      	adds	r2, #8
 80037a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	220f      	movs	r2, #15
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	6939      	ldr	r1, [r7, #16]
 80037dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	2203      	movs	r2, #3
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0203 	and.w	r2, r3, #3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80ac 	beq.w	800397a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003822:	4b5e      	ldr	r3, [pc, #376]	; (800399c <HAL_GPIO_Init+0x32c>)
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	4a5d      	ldr	r2, [pc, #372]	; (800399c <HAL_GPIO_Init+0x32c>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	6613      	str	r3, [r2, #96]	; 0x60
 800382e:	4b5b      	ldr	r3, [pc, #364]	; (800399c <HAL_GPIO_Init+0x32c>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800383a:	4a59      	ldr	r2, [pc, #356]	; (80039a0 <HAL_GPIO_Init+0x330>)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	3302      	adds	r3, #2
 8003842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	220f      	movs	r2, #15
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003864:	d025      	beq.n	80038b2 <HAL_GPIO_Init+0x242>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4e      	ldr	r2, [pc, #312]	; (80039a4 <HAL_GPIO_Init+0x334>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_Init+0x23e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_GPIO_Init+0x338>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x23a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4c      	ldr	r2, [pc, #304]	; (80039ac <HAL_GPIO_Init+0x33c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x236>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4b      	ldr	r2, [pc, #300]	; (80039b0 <HAL_GPIO_Init+0x340>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x232>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4a      	ldr	r2, [pc, #296]	; (80039b4 <HAL_GPIO_Init+0x344>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x22e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a49      	ldr	r2, [pc, #292]	; (80039b8 <HAL_GPIO_Init+0x348>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x22a>
 8003896:	2306      	movs	r3, #6
 8003898:	e00c      	b.n	80038b4 <HAL_GPIO_Init+0x244>
 800389a:	2307      	movs	r3, #7
 800389c:	e00a      	b.n	80038b4 <HAL_GPIO_Init+0x244>
 800389e:	2305      	movs	r3, #5
 80038a0:	e008      	b.n	80038b4 <HAL_GPIO_Init+0x244>
 80038a2:	2304      	movs	r3, #4
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x244>
 80038a6:	2303      	movs	r3, #3
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x244>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x244>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x244>
 80038b2:	2300      	movs	r3, #0
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	f002 0203 	and.w	r2, r2, #3
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038c4:	4936      	ldr	r1, [pc, #216]	; (80039a0 <HAL_GPIO_Init+0x330>)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038d2:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <HAL_GPIO_Init+0x34c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f6:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_GPIO_Init+0x34c>)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80038fc:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <HAL_GPIO_Init+0x34c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003920:	4a26      	ldr	r2, [pc, #152]	; (80039bc <HAL_GPIO_Init+0x34c>)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <HAL_GPIO_Init+0x34c>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800394a:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_GPIO_Init+0x34c>)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_GPIO_Init+0x34c>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	43db      	mvns	r3, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_GPIO_Init+0x34c>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	f47f ae78 	bne.w	8003680 <HAL_GPIO_Init+0x10>
  }
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	48000400 	.word	0x48000400
 80039a8:	48000800 	.word	0x48000800
 80039ac:	48000c00 	.word	0x48000c00
 80039b0:	48001000 	.word	0x48001000
 80039b4:	48001400 	.word	0x48001400
 80039b8:	48001800 	.word	0x48001800
 80039bc:	40010400 	.word	0x40010400

080039c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40007000 	.word	0x40007000

080039dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ea:	d130      	bne.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f8:	d038      	beq.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2232      	movs	r2, #50	; 0x32
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0c9b      	lsrs	r3, r3, #18
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a20:	e002      	b.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a34:	d102      	bne.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f2      	bne.n	8003a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a48:	d110      	bne.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e00f      	b.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d007      	beq.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a64:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	20000000 	.word	0x20000000
 8003a84:	431bde83 	.word	0x431bde83

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e3d4      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9a:	4ba1      	ldr	r3, [pc, #644]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa4:	4b9e      	ldr	r3, [pc, #632]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80e4 	beq.w	8003c84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4a>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f040 808b 	bne.w	8003be0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 8087 	bne.w	8003be0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad2:	4b93      	ldr	r3, [pc, #588]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_RCC_OscConfig+0x62>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e3ac      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	4b8c      	ldr	r3, [pc, #560]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_RCC_OscConfig+0x7c>
 8003afa:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b02:	e005      	b.n	8003b10 <HAL_RCC_OscConfig+0x88>
 8003b04:	4b86      	ldr	r3, [pc, #536]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d223      	bcs.n	8003b5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd3f 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e38d      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b28:	4b7d      	ldr	r3, [pc, #500]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7c      	ldr	r2, [pc, #496]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b7a      	ldr	r3, [pc, #488]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4977      	ldr	r1, [pc, #476]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b46:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	4972      	ldr	r1, [pc, #456]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 8003b5a:	e025      	b.n	8003ba8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b5c:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6f      	ldr	r2, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b62:	f043 0308 	orr.w	r3, r3, #8
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	496a      	ldr	r1, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7a:	4b69      	ldr	r3, [pc, #420]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	4965      	ldr	r1, [pc, #404]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fcff 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e34d      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba8:	f000 fc36 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 8003bac:	4601      	mov	r1, r0
 8003bae:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	4a5a      	ldr	r2, [pc, #360]	; (8003d24 <HAL_RCC_OscConfig+0x29c>)
 8003bba:	5cd3      	ldrb	r3, [r2, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa21 f303 	lsr.w	r3, r1, r3
 8003bc4:	4a58      	ldr	r2, [pc, #352]	; (8003d28 <HAL_RCC_OscConfig+0x2a0>)
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bc8:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x2a4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe f89b 	bl	8001d08 <HAL_InitTick>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d052      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	e331      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d032      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a4c      	ldr	r2, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe f8d4 	bl	8001da0 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bfc:	f7fe f8d0 	bl	8001da0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e31a      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c0e:	4b44      	ldr	r3, [pc, #272]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a40      	ldr	r2, [pc, #256]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	493b      	ldr	r1, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c38:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	4936      	ldr	r1, [pc, #216]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	e01a      	b.n	8003c84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c4e:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a33      	ldr	r2, [pc, #204]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5a:	f7fe f8a1 	bl	8001da0 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c62:	f7fe f89d 	bl	8001da0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e2e7      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c74:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x1da>
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d074      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d005      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x21a>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d10e      	bne.n	8003cba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d064      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d160      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e2c4      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x24a>
 8003cc4:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a15      	ldr	r2, [pc, #84]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e01d      	b.n	8003d0e <HAL_RCC_OscConfig+0x286>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x26e>
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e00b      	b.n	8003d0e <HAL_RCC_OscConfig+0x286>
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a06      	ldr	r2, [pc, #24]	; (8003d20 <HAL_RCC_OscConfig+0x298>)
 8003d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fe f843 	bl	8001da0 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1c:	e011      	b.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	080071a8 	.word	0x080071a8
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fe f836 	bl	8001da0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e280      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d42:	4baf      	ldr	r3, [pc, #700]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x2a8>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe f826 	bl	8001da0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fe f822 	bl	8001da0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e26c      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d6a:	4ba5      	ldr	r3, [pc, #660]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2d0>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d060      	beq.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x310>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d116      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d98:	4b99      	ldr	r3, [pc, #612]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_OscConfig+0x328>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e249      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b93      	ldr	r3, [pc, #588]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	4990      	ldr	r1, [pc, #576]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc4:	e040      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d023      	beq.n	8003e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dce:	4b8c      	ldr	r3, [pc, #560]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a8b      	ldr	r2, [pc, #556]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd ffe1 	bl	8001da0 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fd ffdd 	bl	8001da0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e227      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df4:	4b82      	ldr	r3, [pc, #520]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b7f      	ldr	r3, [pc, #508]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	497c      	ldr	r1, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	e018      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a79      	ldr	r2, [pc, #484]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd ffbd 	bl	8001da0 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2a:	f7fd ffb9 	bl	8001da0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e203      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e3c:	4b70      	ldr	r3, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03c      	beq.n	8003ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01c      	beq.n	8003e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	4a67      	ldr	r2, [pc, #412]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd ff98 	bl	8001da0 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd ff94 	bl	8001da0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1de      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e86:	4b5e      	ldr	r3, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCC_OscConfig+0x3ec>
 8003e94:	e01b      	b.n	8003ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e96:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd ff7b 	bl	8001da0 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fd ff77 	bl	8001da0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1c1      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec0:	4b4f      	ldr	r3, [pc, #316]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ef      	bne.n	8003eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80a6 	beq.w	8004028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ee0:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b44      	ldr	r3, [pc, #272]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	4a43      	ldr	r2, [pc, #268]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef8:	4b41      	ldr	r3, [pc, #260]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <HAL_RCC_OscConfig+0x57c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d118      	bne.n	8003f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_OscConfig+0x57c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a3a      	ldr	r2, [pc, #232]	; (8004004 <HAL_RCC_OscConfig+0x57c>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f20:	f7fd ff3e 	bl	8001da0 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fd ff3a 	bl	8001da0 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e184      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3a:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_RCC_OscConfig+0x57c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4d8>
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	4a2a      	ldr	r2, [pc, #168]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f5e:	e024      	b.n	8003faa <HAL_RCC_OscConfig+0x522>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d110      	bne.n	8003f8a <HAL_RCC_OscConfig+0x502>
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	4a24      	ldr	r2, [pc, #144]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	4a20      	ldr	r2, [pc, #128]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f88:	e00f      	b.n	8003faa <HAL_RCC_OscConfig+0x522>
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fef5 	bl	8001da0 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7fd fef1 	bl	8001da0 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e139      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_OscConfig+0x578>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0ed      	beq.n	8003fba <HAL_RCC_OscConfig+0x532>
 8003fde:	e01a      	b.n	8004016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fd fede 	bl	8001da0 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe6:	e00f      	b.n	8004008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fd feda 	bl	8001da0 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d906      	bls.n	8004008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e122      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004008:	4b90      	ldr	r3, [pc, #576]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e8      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004016:	7ffb      	ldrb	r3, [r7, #31]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b8b      	ldr	r3, [pc, #556]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	4a8a      	ldr	r2, [pc, #552]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004026:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8108 	beq.w	8004242 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 80d0 	bne.w	80041dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800403c:	4b83      	ldr	r3, [pc, #524]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0203 	and.w	r2, r3, #3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d130      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	3b01      	subs	r3, #1
 800405c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d127      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d11f      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800407c:	2a07      	cmp	r2, #7
 800407e:	bf14      	ite	ne
 8004080:	2201      	movne	r2, #1
 8004082:	2200      	moveq	r2, #0
 8004084:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	3b01      	subs	r3, #1
 8004098:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d06e      	beq.n	8004190 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d069      	beq.n	800418c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040b8:	4b64      	ldr	r3, [pc, #400]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040c4:	4b61      	ldr	r3, [pc, #388]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0b7      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040d4:	4b5d      	ldr	r3, [pc, #372]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80040da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e0:	f7fd fe5e 	bl	8001da0 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fe5a 	bl	8001da0 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e0a4      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040fa:	4b54      	ldr	r3, [pc, #336]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004106:	4b51      	ldr	r3, [pc, #324]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b51      	ldr	r3, [pc, #324]	; (8004250 <HAL_RCC_OscConfig+0x7c8>)
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004116:	3a01      	subs	r2, #1
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004120:	0212      	lsls	r2, r2, #8
 8004122:	4311      	orrs	r1, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004128:	0852      	lsrs	r2, r2, #1
 800412a:	3a01      	subs	r2, #1
 800412c:	0552      	lsls	r2, r2, #21
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004134:	0852      	lsrs	r2, r2, #1
 8004136:	3a01      	subs	r2, #1
 8004138:	0652      	lsls	r2, r2, #25
 800413a:	4311      	orrs	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004140:	0912      	lsrs	r2, r2, #4
 8004142:	0452      	lsls	r2, r2, #17
 8004144:	430a      	orrs	r2, r1
 8004146:	4941      	ldr	r1, [pc, #260]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800414c:	4b3f      	ldr	r3, [pc, #252]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a3e      	ldr	r2, [pc, #248]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004158:	4b3c      	ldr	r3, [pc, #240]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a3b      	ldr	r2, [pc, #236]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800415e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004164:	f7fd fe1c 	bl	8001da0 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd fe18 	bl	8001da0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e062      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800418a:	e05a      	b.n	8004242 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e059      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d152      	bne.n	8004242 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2a      	ldr	r2, [pc, #168]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a27      	ldr	r2, [pc, #156]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041b4:	f7fd fdf4 	bl	8001da0 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd fdf0 	bl	8001da0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e03a      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ce:	4b1f      	ldr	r3, [pc, #124]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x734>
 80041da:	e032      	b.n	8004242 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d02d      	beq.n	800423e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4a13      	ldr	r2, [pc, #76]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004200:	f023 0303 	bic.w	r3, r3, #3
 8004204:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4a10      	ldr	r2, [pc, #64]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 800420c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fdc3 	bl	8001da0 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421e:	f7fd fdbf 	bl	8001da0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e009      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCC_OscConfig+0x7c4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x796>
 800423c:	e001      	b.n	8004242 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	f99d808c 	.word	0xf99d808c

08004254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0c8      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004268:	4b66      	ldr	r3, [pc, #408]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d910      	bls.n	8004298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 0207 	bic.w	r2, r3, #7
 800427e:	4961      	ldr	r1, [pc, #388]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b5f      	ldr	r3, [pc, #380]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0b0      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d04c      	beq.n	800433e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d121      	bne.n	80042fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e09e      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d115      	bne.n	80042fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e092      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d107      	bne.n	80042ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042dc:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e086      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ec:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e07e      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 0203 	bic.w	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	493f      	ldr	r1, [pc, #252]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430e:	f7fd fd47 	bl	8001da0 <HAL_GetTick>
 8004312:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004314:	e00a      	b.n	800432c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004316:	f7fd fd43 	bl	8001da0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e066      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432c:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 020c 	and.w	r2, r3, #12
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	429a      	cmp	r2, r3
 800433c:	d1eb      	bne.n	8004316 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434a:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	492c      	ldr	r1, [pc, #176]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d210      	bcs.n	800438c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 0207 	bic.w	r2, r3, #7
 8004372:	4924      	ldr	r1, [pc, #144]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCC_ClockConfig+0x1b0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e036      	b.n	80043fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4918      	ldr	r1, [pc, #96]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4910      	ldr	r1, [pc, #64]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ca:	f000 f825 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043ce:	4601      	mov	r1, r0
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCC_ClockConfig+0x1b4>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	4a0c      	ldr	r2, [pc, #48]	; (800440c <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	5cd3      	ldrb	r3, [r2, r3]
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	fa21 f303 	lsr.w	r3, r1, r3
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd fc8a 	bl	8001d08 <HAL_InitTick>
 80043f4:	4603      	mov	r3, r0
 80043f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80043f8:	7afb      	ldrb	r3, [r7, #11]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40022000 	.word	0x40022000
 8004408:	40021000 	.word	0x40021000
 800440c:	080071a8 	.word	0x080071a8
 8004410:	20000000 	.word	0x20000000
 8004414:	20000004 	.word	0x20000004

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004426:	4b3d      	ldr	r3, [pc, #244]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004430:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x34>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d121      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d11e      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800444c:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004458:	4b30      	ldr	r3, [pc, #192]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 800445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	e005      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004474:	4a2a      	ldr	r2, [pc, #168]	; (8004520 <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10d      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d102      	bne.n	8004496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e004      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <HAL_RCC_GetSysClockFreq+0x110>)
 800449e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b0c      	cmp	r3, #12
 80044a4:	d133      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d002      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0xa4>
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0xaa>
 80044ba:	e005      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044bc:	4b19      	ldr	r3, [pc, #100]	; (8004524 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044be:	617b      	str	r3, [r7, #20]
      break;
 80044c0:	e005      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_GetSysClockFreq+0x110>)
 80044c4:	617b      	str	r3, [r7, #20]
      break;
 80044c6:	e002      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	617b      	str	r3, [r7, #20]
      break;
 80044cc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044ce:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	3301      	adds	r3, #1
 80044da:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	fb02 f203 	mul.w	r2, r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_GetSysClockFreq+0x104>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0e5b      	lsrs	r3, r3, #25
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	3301      	adds	r3, #1
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800450e:	69bb      	ldr	r3, [r7, #24]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3724      	adds	r7, #36	; 0x24
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40021000 	.word	0x40021000
 8004520:	080071c0 	.word	0x080071c0
 8004524:	00f42400 	.word	0x00f42400
 8004528:	007a1200 	.word	0x007a1200

0800452c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCC_GetHCLKFreq+0x14>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000000 	.word	0x20000000

08004544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004548:	f7ff fff0 	bl	800452c <HAL_RCC_GetHCLKFreq>
 800454c:	4601      	mov	r1, r0
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <HAL_RCC_GetPCLK1Freq+0x28>)
 800455a:	5cd3      	ldrb	r3, [r2, r3]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	080071b8 	.word	0x080071b8

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004574:	f7ff ffda 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004578:	4601      	mov	r1, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0adb      	lsrs	r3, r3, #11
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004586:	5cd3      	ldrb	r3, [r2, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	080071b8 	.word	0x080071b8

0800459c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045a8:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045b4:	f7ff fa04 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 80045b8:	6178      	str	r0, [r7, #20]
 80045ba:	e014      	b.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6593      	str	r3, [r2, #88]	; 0x58
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045d4:	f7ff f9f4 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 80045d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d10b      	bne.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d919      	bls.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2ba0      	cmp	r3, #160	; 0xa0
 80045f8:	d902      	bls.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045fa:	2302      	movs	r3, #2
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e013      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004600:	2301      	movs	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e010      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d902      	bls.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800460c:	2303      	movs	r3, #3
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e00a      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d102      	bne.n	800461e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004618:	2302      	movs	r3, #2
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	e004      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d101      	bne.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004624:	2301      	movs	r3, #1
 8004626:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 0207 	bic.w	r2, r3, #7
 8004630:	4909      	ldr	r1, [pc, #36]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	40022000 	.word	0x40022000

0800465c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004664:	2300      	movs	r3, #0
 8004666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004668:	2300      	movs	r3, #0
 800466a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03f      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004680:	d01c      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004686:	d802      	bhi.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800468c:	e01f      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 800468e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004692:	d003      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004694:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004698:	d01c      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800469a:	e018      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800469c:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a84      	ldr	r2, [pc, #528]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a8:	e015      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fab9 	bl	8004c28 <RCCEx_PLLSAI1_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ba:	e00c      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3320      	adds	r3, #32
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fba0 	bl	8004e08 <RCCEx_PLLSAI2_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046cc:	e003      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	74fb      	strb	r3, [r7, #19]
      break;
 80046d2:	e000      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80046d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046dc:	4b75      	ldr	r3, [pc, #468]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ea:	4972      	ldr	r1, [pc, #456]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046f2:	e001      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d03f      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470c:	d01c      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800470e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004712:	d802      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004718:	e01f      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800471a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471e:	d003      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004724:	d01c      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004726:	e018      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004728:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a61      	ldr	r2, [pc, #388]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004732:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004734:	e015      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fa73 	bl	8004c28 <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004746:	e00c      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3320      	adds	r3, #32
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fb5a 	bl	8004e08 <RCCEx_PLLSAI2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004758:	e003      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	74fb      	strb	r3, [r7, #19]
      break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004768:	4b52      	ldr	r3, [pc, #328]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004776:	494f      	ldr	r1, [pc, #316]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800477e:	e001      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a0 	beq.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004796:	4b47      	ldr	r3, [pc, #284]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ac:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	4a40      	ldr	r2, [pc, #256]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b6:	6593      	str	r3, [r2, #88]	; 0x58
 80047b8:	4b3e      	ldr	r3, [pc, #248]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c8:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80047ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d4:	f7fd fae4 	bl	8001da0 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047da:	e009      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047dc:	f7fd fae0 	bl	8001da0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	74fb      	strb	r3, [r7, #19]
        break;
 80047ee:	e005      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047f0:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d15c      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01f      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	429a      	cmp	r2, r3
 800481e:	d019      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004820:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	4a20      	ldr	r2, [pc, #128]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd fa9f 	bl	8001da0 <HAL_GetTick>
 8004862:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004864:	e00b      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd fa9b 	bl	8001da0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d902      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	74fb      	strb	r3, [r7, #19]
            break;
 800487c:	e006      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487e:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ec      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a2:	4904      	ldr	r1, [pc, #16]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048aa:	e009      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c0:	7c7b      	ldrb	r3, [r7, #17]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4b9e      	ldr	r3, [pc, #632]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	4a9d      	ldr	r2, [pc, #628]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048de:	4b98      	ldr	r3, [pc, #608]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f023 0203 	bic.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	4994      	ldr	r1, [pc, #592]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004900:	4b8f      	ldr	r3, [pc, #572]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f023 020c 	bic.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	498c      	ldr	r1, [pc, #560]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004922:	4b87      	ldr	r3, [pc, #540]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	4983      	ldr	r1, [pc, #524]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004944:	4b7e      	ldr	r3, [pc, #504]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	497b      	ldr	r1, [pc, #492]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004966:	4b76      	ldr	r3, [pc, #472]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004974:	4972      	ldr	r1, [pc, #456]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004988:	4b6d      	ldr	r3, [pc, #436]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	496a      	ldr	r1, [pc, #424]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049aa:	4b65      	ldr	r3, [pc, #404]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b8:	4961      	ldr	r1, [pc, #388]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049cc:	4b5c      	ldr	r3, [pc, #368]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	4959      	ldr	r1, [pc, #356]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ee:	4b54      	ldr	r3, [pc, #336]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	4950      	ldr	r1, [pc, #320]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a10:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	4948      	ldr	r1, [pc, #288]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a32:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	493f      	ldr	r1, [pc, #252]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d028      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a54:	4b3a      	ldr	r3, [pc, #232]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a62:	4937      	ldr	r1, [pc, #220]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a72:	d106      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a74:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a31      	ldr	r2, [pc, #196]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7e:	60d3      	str	r3, [r2, #12]
 8004a80:	e011      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	2101      	movs	r1, #1
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f8c8 	bl	8004c28 <RCCEx_PLLSAI1_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d028      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	491f      	ldr	r1, [pc, #124]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004adc:	60d3      	str	r3, [r2, #12]
 8004ade:	e011      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f899 	bl	8004c28 <RCCEx_PLLSAI1_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d02b      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1e:	4908      	ldr	r1, [pc, #32]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a02      	ldr	r2, [pc, #8]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3a:	60d3      	str	r3, [r2, #12]
 8004b3c:	e014      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2101      	movs	r1, #1
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f867 	bl	8004c28 <RCCEx_PLLSAI1_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02f      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b74:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b82:	4928      	ldr	r1, [pc, #160]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f844 	bl	8004c28 <RCCEx_PLLSAI1_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d014      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	74bb      	strb	r3, [r7, #18]
 8004bae:	e011      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3320      	adds	r3, #32
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f921 	bl	8004e08 <RCCEx_PLLSAI2_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bca:	7cfb      	ldrb	r3, [r7, #19]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004be0:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bee:	490d      	ldr	r1, [pc, #52]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c12:	4904      	ldr	r1, [pc, #16]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000

08004c28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c36:	4b73      	ldr	r3, [pc, #460]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c42:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0203 	and.w	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d10d      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
       ||
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c5a:	4b6a      	ldr	r3, [pc, #424]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
       ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d044      	beq.n	8004cf8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
 8004c72:	e041      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d00c      	beq.n	8004c96 <RCCEx_PLLSAI1_Config+0x6e>
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d013      	beq.n	8004ca8 <RCCEx_PLLSAI1_Config+0x80>
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d120      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c84:	4b5f      	ldr	r3, [pc, #380]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11d      	bne.n	8004ccc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c94:	e01a      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c96:	4b5b      	ldr	r3, [pc, #364]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca6:	e013      	b.n	8004cd0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ca8:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10f      	bne.n	8004cd4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cb4:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cc4:	e006      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cca:	e004      	b.n	8004cd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004cd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cdc:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	4944      	ldr	r1, [pc, #272]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d17d      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cfe:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a40      	ldr	r2, [pc, #256]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0a:	f7fd f849 	bl	8001da0 <HAL_GetTick>
 8004d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d10:	e009      	b.n	8004d26 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d12:	f7fd f845 	bl	8001da0 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d902      	bls.n	8004d26 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	73fb      	strb	r3, [r7, #15]
        break;
 8004d24:	e005      	b.n	8004d32 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ef      	bne.n	8004d12 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d160      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d111      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6892      	ldr	r2, [r2, #8]
 8004d4e:	0211      	lsls	r1, r2, #8
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68d2      	ldr	r2, [r2, #12]
 8004d54:	0912      	lsrs	r2, r2, #4
 8004d56:	0452      	lsls	r2, r2, #17
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	492a      	ldr	r1, [pc, #168]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	610b      	str	r3, [r1, #16]
 8004d60:	e027      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d112      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d68:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6892      	ldr	r2, [r2, #8]
 8004d78:	0211      	lsls	r1, r2, #8
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6912      	ldr	r2, [r2, #16]
 8004d7e:	0852      	lsrs	r2, r2, #1
 8004d80:	3a01      	subs	r2, #1
 8004d82:	0552      	lsls	r2, r2, #21
 8004d84:	430a      	orrs	r2, r1
 8004d86:	491f      	ldr	r1, [pc, #124]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	610b      	str	r3, [r1, #16]
 8004d8c:	e011      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6892      	ldr	r2, [r2, #8]
 8004d9e:	0211      	lsls	r1, r2, #8
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6952      	ldr	r2, [r2, #20]
 8004da4:	0852      	lsrs	r2, r2, #1
 8004da6:	3a01      	subs	r2, #1
 8004da8:	0652      	lsls	r2, r2, #25
 8004daa:	430a      	orrs	r2, r1
 8004dac:	4915      	ldr	r1, [pc, #84]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004db2:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fc ffef 	bl	8001da0 <HAL_GetTick>
 8004dc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dc4:	e009      	b.n	8004dda <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dc6:	f7fc ffeb 	bl	8001da0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d902      	bls.n	8004dda <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	73fb      	strb	r3, [r7, #15]
          break;
 8004dd8:	e005      	b.n	8004de6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ef      	beq.n	8004dc6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	4903      	ldr	r1, [pc, #12]	; (8004e04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000

08004e08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e16:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d018      	beq.n	8004e54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e22:	4b65      	ldr	r3, [pc, #404]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f003 0203 	and.w	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d10d      	bne.n	8004e4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
       ||
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
       ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d044      	beq.n	8004ed8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	e041      	b.n	8004ed8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d00c      	beq.n	8004e76 <RCCEx_PLLSAI2_Config+0x6e>
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d013      	beq.n	8004e88 <RCCEx_PLLSAI2_Config+0x80>
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d120      	bne.n	8004ea6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e64:	4b54      	ldr	r3, [pc, #336]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11d      	bne.n	8004eac <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e74:	e01a      	b.n	8004eac <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e76:	4b50      	ldr	r3, [pc, #320]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d116      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e86:	e013      	b.n	8004eb0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e88:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10f      	bne.n	8004eb4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e94:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ea4:	e006      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eaa:	e004      	b.n	8004eb6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004eac:	bf00      	nop
 8004eae:	e002      	b.n	8004eb6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004eb0:	bf00      	nop
 8004eb2:	e000      	b.n	8004eb6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004eb4:	bf00      	nop
    }

    if(status == HAL_OK)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10d      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ebc:	4b3e      	ldr	r3, [pc, #248]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	4939      	ldr	r1, [pc, #228]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d167      	bne.n	8004fae <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a35      	ldr	r2, [pc, #212]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eea:	f7fc ff59 	bl	8001da0 <HAL_GetTick>
 8004eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ef0:	e009      	b.n	8004f06 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ef2:	f7fc ff55 	bl	8001da0 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d902      	bls.n	8004f06 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	73fb      	strb	r3, [r7, #15]
        break;
 8004f04:	e005      	b.n	8004f12 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f06:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ef      	bne.n	8004ef2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d14a      	bne.n	8004fae <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d111      	bne.n	8004f42 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f1e:	4b26      	ldr	r3, [pc, #152]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6892      	ldr	r2, [r2, #8]
 8004f2e:	0211      	lsls	r1, r2, #8
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	0912      	lsrs	r2, r2, #4
 8004f36:	0452      	lsls	r2, r2, #17
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	491f      	ldr	r1, [pc, #124]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	614b      	str	r3, [r1, #20]
 8004f40:	e011      	b.n	8004f66 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6892      	ldr	r2, [r2, #8]
 8004f52:	0211      	lsls	r1, r2, #8
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6912      	ldr	r2, [r2, #16]
 8004f58:	0852      	lsrs	r2, r2, #1
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	0652      	lsls	r2, r2, #25
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	4915      	ldr	r1, [pc, #84]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fc ff15 	bl	8001da0 <HAL_GetTick>
 8004f76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f78:	e009      	b.n	8004f8e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f7a:	f7fc ff11 	bl	8001da0 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d902      	bls.n	8004f8e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f8c:	e005      	b.n	8004f9a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ef      	beq.n	8004f7a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	4903      	ldr	r1, [pc, #12]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e01d      	b.n	800500a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fbfc 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f000 fb22 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_TIM_Base_Start_IT+0x50>)
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b06      	cmp	r3, #6
 800503c:	d00b      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x42>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d007      	beq.n	8005056 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	00010007 	.word	0x00010007

08005068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e01d      	b.n	80050b6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc fb72 	bl	8001778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f000 facc 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2201      	movs	r2, #1
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fe26 	bl	8005d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <HAL_TIM_PWM_Start+0x98>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_TIM_PWM_Start+0x4a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1d      	ldr	r2, [pc, #116]	; (800515c <HAL_TIM_PWM_Start+0x9c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIM_PWM_Start+0x4a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <HAL_TIM_PWM_Start+0xa0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIM_PWM_Start+0x4a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <HAL_TIM_PWM_Start+0xa4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIM_PWM_Start+0x4a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_TIM_PWM_Start+0xa8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_TIM_PWM_Start+0x4e>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_TIM_PWM_Start+0x50>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005122:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_TIM_PWM_Start+0xac>)
 800512c:	4013      	ands	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b06      	cmp	r3, #6
 8005134:	d00b      	beq.n	800514e <HAL_TIM_PWM_Start+0x8e>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d007      	beq.n	800514e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800
 800516c:	00010007 	.word	0x00010007

08005170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d122      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0202 	mvn.w	r2, #2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa28 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa1a 	bl	80055f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa2b 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0204 	mvn.w	r2, #4
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9fe 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f9f0 	bl	80055f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fa01 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b08      	cmp	r3, #8
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0208 	mvn.w	r2, #8
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2204      	movs	r2, #4
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9d4 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9c6 	bl	80055f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f9d7 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b10      	cmp	r3, #16
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9aa 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f99c 	bl	80055f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f9ad 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0201 	mvn.w	r2, #1
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f976 	bl	80055e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fe38 	bl	8005f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	d10e      	bne.n	800534e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d107      	bne.n	800534e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fe2b 	bl	8005fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d10e      	bne.n	800537a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d107      	bne.n	800537a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f95b 	bl	8005630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d10e      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b20      	cmp	r3, #32
 8005394:	d107      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0220 	mvn.w	r2, #32
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fdeb 	bl	8005f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e105      	b.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b14      	cmp	r3, #20
 80053de:	f200 80f0 	bhi.w	80055c2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	080055c3 	.word	0x080055c3
 80053f0:	080055c3 	.word	0x080055c3
 80053f4:	080055c3 	.word	0x080055c3
 80053f8:	0800547d 	.word	0x0800547d
 80053fc:	080055c3 	.word	0x080055c3
 8005400:	080055c3 	.word	0x080055c3
 8005404:	080055c3 	.word	0x080055c3
 8005408:	080054bf 	.word	0x080054bf
 800540c:	080055c3 	.word	0x080055c3
 8005410:	080055c3 	.word	0x080055c3
 8005414:	080055c3 	.word	0x080055c3
 8005418:	080054ff 	.word	0x080054ff
 800541c:	080055c3 	.word	0x080055c3
 8005420:	080055c3 	.word	0x080055c3
 8005424:	080055c3 	.word	0x080055c3
 8005428:	08005541 	.word	0x08005541
 800542c:	080055c3 	.word	0x080055c3
 8005430:	080055c3 	.word	0x080055c3
 8005434:	080055c3 	.word	0x080055c3
 8005438:	08005581 	.word	0x08005581
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f998 	bl	8005778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0204 	bic.w	r2, r2, #4
 8005466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6999      	ldr	r1, [r3, #24]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	619a      	str	r2, [r3, #24]
      break;
 800547a:	e0a3      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fa08 	bl	8005898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	021a      	lsls	r2, r3, #8
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	619a      	str	r2, [r3, #24]
      break;
 80054bc:	e082      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fa71 	bl	80059ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0208 	orr.w	r2, r2, #8
 80054d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0204 	bic.w	r2, r2, #4
 80054e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69d9      	ldr	r1, [r3, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	61da      	str	r2, [r3, #28]
      break;
 80054fc:	e062      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fad9 	bl	8005abc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69d9      	ldr	r1, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	021a      	lsls	r2, r3, #8
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	61da      	str	r2, [r3, #28]
      break;
 800553e:	e041      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fb22 	bl	8005b90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0208 	orr.w	r2, r2, #8
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800557e:	e021      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fb66 	bl	8005c58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	021a      	lsls	r2, r3, #8
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055c0:	e000      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80055c2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop

080055e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a40      	ldr	r2, [pc, #256]	; (8005758 <TIM_Base_SetConfig+0x114>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d00f      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3d      	ldr	r2, [pc, #244]	; (800575c <TIM_Base_SetConfig+0x118>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3c      	ldr	r2, [pc, #240]	; (8005760 <TIM_Base_SetConfig+0x11c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3b      	ldr	r2, [pc, #236]	; (8005764 <TIM_Base_SetConfig+0x120>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3a      	ldr	r2, [pc, #232]	; (8005768 <TIM_Base_SetConfig+0x124>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d108      	bne.n	8005696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2f      	ldr	r2, [pc, #188]	; (8005758 <TIM_Base_SetConfig+0x114>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01f      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a4:	d01b      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2c      	ldr	r2, [pc, #176]	; (800575c <TIM_Base_SetConfig+0x118>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d017      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <TIM_Base_SetConfig+0x11c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <TIM_Base_SetConfig+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00f      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a29      	ldr	r2, [pc, #164]	; (8005768 <TIM_Base_SetConfig+0x124>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00b      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a28      	ldr	r2, [pc, #160]	; (800576c <TIM_Base_SetConfig+0x128>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a27      	ldr	r2, [pc, #156]	; (8005770 <TIM_Base_SetConfig+0x12c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_Base_SetConfig+0x9a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a26      	ldr	r2, [pc, #152]	; (8005774 <TIM_Base_SetConfig+0x130>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d108      	bne.n	80056f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a10      	ldr	r2, [pc, #64]	; (8005758 <TIM_Base_SetConfig+0x114>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00f      	beq.n	800573c <TIM_Base_SetConfig+0xf8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <TIM_Base_SetConfig+0x124>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00b      	beq.n	800573c <TIM_Base_SetConfig+0xf8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a11      	ldr	r2, [pc, #68]	; (800576c <TIM_Base_SetConfig+0x128>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <TIM_Base_SetConfig+0xf8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a10      	ldr	r2, [pc, #64]	; (8005770 <TIM_Base_SetConfig+0x12c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_Base_SetConfig+0xf8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <TIM_Base_SetConfig+0x130>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d103      	bne.n	8005744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	615a      	str	r2, [r3, #20]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 0302 	bic.w	r3, r3, #2
 80057c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a2c      	ldr	r2, [pc, #176]	; (8005884 <TIM_OC1_SetConfig+0x10c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_OC1_SetConfig+0x80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a2b      	ldr	r2, [pc, #172]	; (8005888 <TIM_OC1_SetConfig+0x110>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_OC1_SetConfig+0x80>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a2a      	ldr	r2, [pc, #168]	; (800588c <TIM_OC1_SetConfig+0x114>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_OC1_SetConfig+0x80>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a29      	ldr	r2, [pc, #164]	; (8005890 <TIM_OC1_SetConfig+0x118>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC1_SetConfig+0x80>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a28      	ldr	r2, [pc, #160]	; (8005894 <TIM_OC1_SetConfig+0x11c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10c      	bne.n	8005812 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0308 	bic.w	r3, r3, #8
 80057fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 0304 	bic.w	r3, r3, #4
 8005810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <TIM_OC1_SetConfig+0x10c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00f      	beq.n	800583a <TIM_OC1_SetConfig+0xc2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1a      	ldr	r2, [pc, #104]	; (8005888 <TIM_OC1_SetConfig+0x110>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00b      	beq.n	800583a <TIM_OC1_SetConfig+0xc2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a19      	ldr	r2, [pc, #100]	; (800588c <TIM_OC1_SetConfig+0x114>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <TIM_OC1_SetConfig+0xc2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <TIM_OC1_SetConfig+0x118>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_OC1_SetConfig+0xc2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a17      	ldr	r2, [pc, #92]	; (8005894 <TIM_OC1_SetConfig+0x11c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d111      	bne.n	800585e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40013400 	.word	0x40013400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f023 0210 	bic.w	r2, r3, #16
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0320 	bic.w	r3, r3, #32
 80058e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a28      	ldr	r2, [pc, #160]	; (8005998 <TIM_OC2_SetConfig+0x100>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC2_SetConfig+0x6c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a27      	ldr	r2, [pc, #156]	; (800599c <TIM_OC2_SetConfig+0x104>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d10d      	bne.n	8005920 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <TIM_OC2_SetConfig+0x100>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00f      	beq.n	8005948 <TIM_OC2_SetConfig+0xb0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a1c      	ldr	r2, [pc, #112]	; (800599c <TIM_OC2_SetConfig+0x104>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00b      	beq.n	8005948 <TIM_OC2_SetConfig+0xb0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <TIM_OC2_SetConfig+0x108>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d007      	beq.n	8005948 <TIM_OC2_SetConfig+0xb0>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a1a      	ldr	r2, [pc, #104]	; (80059a4 <TIM_OC2_SetConfig+0x10c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_OC2_SetConfig+0xb0>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <TIM_OC2_SetConfig+0x110>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d113      	bne.n	8005970 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800594e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40013400 	.word	0x40013400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800

080059ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a27      	ldr	r2, [pc, #156]	; (8005aa8 <TIM_OC3_SetConfig+0xfc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_OC3_SetConfig+0x6a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <TIM_OC3_SetConfig+0x100>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10d      	bne.n	8005a32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <TIM_OC3_SetConfig+0xfc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00f      	beq.n	8005a5a <TIM_OC3_SetConfig+0xae>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1b      	ldr	r2, [pc, #108]	; (8005aac <TIM_OC3_SetConfig+0x100>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <TIM_OC3_SetConfig+0xae>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <TIM_OC3_SetConfig+0x104>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d007      	beq.n	8005a5a <TIM_OC3_SetConfig+0xae>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <TIM_OC3_SetConfig+0x108>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_OC3_SetConfig+0xae>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <TIM_OC3_SetConfig+0x10c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d113      	bne.n	8005a82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800

08005abc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	031b      	lsls	r3, r3, #12
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a18      	ldr	r2, [pc, #96]	; (8005b7c <TIM_OC4_SetConfig+0xc0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00f      	beq.n	8005b40 <TIM_OC4_SetConfig+0x84>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a17      	ldr	r2, [pc, #92]	; (8005b80 <TIM_OC4_SetConfig+0xc4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_OC4_SetConfig+0x84>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a16      	ldr	r2, [pc, #88]	; (8005b84 <TIM_OC4_SetConfig+0xc8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_OC4_SetConfig+0x84>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <TIM_OC4_SetConfig+0xcc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_OC4_SetConfig+0x84>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a14      	ldr	r2, [pc, #80]	; (8005b8c <TIM_OC4_SetConfig+0xd0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d109      	bne.n	8005b54 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40013400 	.word	0x40013400
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800

08005b90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	041b      	lsls	r3, r3, #16
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <TIM_OC5_SetConfig+0xb4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00f      	beq.n	8005c0a <TIM_OC5_SetConfig+0x7a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <TIM_OC5_SetConfig+0xb8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00b      	beq.n	8005c0a <TIM_OC5_SetConfig+0x7a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <TIM_OC5_SetConfig+0xbc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_OC5_SetConfig+0x7a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <TIM_OC5_SetConfig+0xc0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_OC5_SetConfig+0x7a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a13      	ldr	r2, [pc, #76]	; (8005c54 <TIM_OC5_SetConfig+0xc4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d109      	bne.n	8005c1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	621a      	str	r2, [r3, #32]
}
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	051b      	lsls	r3, r3, #20
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <TIM_OC6_SetConfig+0xb8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_OC6_SetConfig+0x7c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a17      	ldr	r2, [pc, #92]	; (8005d14 <TIM_OC6_SetConfig+0xbc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_OC6_SetConfig+0x7c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <TIM_OC6_SetConfig+0xc0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_OC6_SetConfig+0x7c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <TIM_OC6_SetConfig+0xc4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC6_SetConfig+0x7c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <TIM_OC6_SetConfig+0xc8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d109      	bne.n	8005ce8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800

08005d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	2201      	movs	r2, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1a      	ldr	r2, [r3, #32]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e068      	b.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d108      	bne.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01d      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d018      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10c      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40013400 	.word	0x40013400
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40014000 	.word	0x40014000

08005e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e065      	b.n	8005f68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d004      	beq.n	8005f2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d115      	bne.n	8005f56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	051b      	lsls	r3, r3, #20
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40013400 	.word	0x40013400

08005f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e040      	b.n	800604c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fb fc84 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fac6 	bl	8006588 <UART_SetConfig>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e022      	b.n	800604c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fe2c 	bl	8006c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 feb3 	bl	8006db0 <UART_CheckIdleState>
 800604a:	4603      	mov	r3, r0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	2b20      	cmp	r3, #32
 800606a:	f040 8081 	bne.w	8006170 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_UART_Transmit+0x26>
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e079      	b.n	8006172 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_UART_Transmit+0x38>
 8006088:	2302      	movs	r3, #2
 800608a:	e072      	b.n	8006172 <HAL_UART_Transmit+0x11e>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2221      	movs	r2, #33	; 0x21
 800609e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80060a0:	f7fb fe7e 	bl	8001da0 <HAL_GetTick>
 80060a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	88fa      	ldrh	r2, [r7, #6]
 80060b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060be:	d108      	bne.n	80060d2 <HAL_UART_Transmit+0x7e>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	e003      	b.n	80060da <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80060e2:	e02d      	b.n	8006140 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2180      	movs	r1, #128	; 0x80
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fea3 	bl	8006e3a <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e039      	b.n	8006172 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006110:	b292      	uxth	r2, r2
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	3302      	adds	r3, #2
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	e008      	b.n	800612e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b292      	uxth	r2, r2
 8006126:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3301      	adds	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1cb      	bne.n	80060e4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2200      	movs	r2, #0
 8006154:	2140      	movs	r1, #64	; 0x40
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fe6f 	bl	8006e3a <UART_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e005      	b.n	8006172 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e000      	b.n	8006172 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006170:	2302      	movs	r3, #2
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800618e:	2b20      	cmp	r3, #32
 8006190:	f040 808a 	bne.w	80062a8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_UART_Receive_IT+0x24>
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e082      	b.n	80062aa <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Receive_IT+0x36>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e07b      	b.n	80062aa <HAL_UART_Receive_IT+0x12e>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	d10e      	bne.n	80061fe <HAL_UART_Receive_IT+0x82>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d105      	bne.n	80061f4 <HAL_UART_Receive_IT+0x78>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061f2:	e02d      	b.n	8006250 <HAL_UART_Receive_IT+0xd4>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	22ff      	movs	r2, #255	; 0xff
 80061f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fc:	e028      	b.n	8006250 <HAL_UART_Receive_IT+0xd4>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10d      	bne.n	8006222 <HAL_UART_Receive_IT+0xa6>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Receive_IT+0x9c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006216:	e01b      	b.n	8006250 <HAL_UART_Receive_IT+0xd4>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	227f      	movs	r2, #127	; 0x7f
 800621c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006220:	e016      	b.n	8006250 <HAL_UART_Receive_IT+0xd4>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622a:	d10d      	bne.n	8006248 <HAL_UART_Receive_IT+0xcc>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_UART_Receive_IT+0xc2>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	227f      	movs	r2, #127	; 0x7f
 8006238:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800623c:	e008      	b.n	8006250 <HAL_UART_Receive_IT+0xd4>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	223f      	movs	r2, #63	; 0x3f
 8006242:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006246:	e003      	b.n	8006250 <HAL_UART_Receive_IT+0xd4>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2222      	movs	r2, #34	; 0x22
 800625a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006274:	d107      	bne.n	8006286 <HAL_UART_Receive_IT+0x10a>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4a0d      	ldr	r2, [pc, #52]	; (80062b8 <HAL_UART_Receive_IT+0x13c>)
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
 8006284:	e002      	b.n	800628c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <HAL_UART_Receive_IT+0x140>)
 800628a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80062a2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	08007079 	.word	0x08007079
 80062bc:	08006fcf 	.word	0x08006fcf

080062c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80062e6:	4013      	ands	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d113      	bne.n	8006318 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00e      	beq.n	8006318 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8114 	beq.w	8006536 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
      }
      return;
 8006316:	e10e      	b.n	8006536 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80d6 	beq.w	80064cc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d105      	bne.n	8006336 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80cb 	beq.w	80064cc <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <HAL_UART_IRQHandler+0x9e>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2201      	movs	r2, #1
 8006350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006356:	f043 0201 	orr.w	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <HAL_UART_IRQHandler+0xc6>
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2202      	movs	r2, #2
 8006378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637e:	f043 0204 	orr.w	r2, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00e      	beq.n	80063ae <HAL_UART_IRQHandler+0xee>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2204      	movs	r2, #4
 80063a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a6:	f043 0202 	orr.w	r2, r3, #2
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d013      	beq.n	80063e0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2208      	movs	r2, #8
 80063d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d8:	f043 0208 	orr.w	r2, r3, #8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00f      	beq.n	800640a <HAL_UART_IRQHandler+0x14a>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 8093 	beq.w	800653a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00c      	beq.n	8006438 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b40      	cmp	r3, #64	; 0x40
 800644a:	d004      	beq.n	8006456 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006452:	2b00      	cmp	r3, #0
 8006454:	d031      	beq.n	80064ba <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fd6a 	bl	8006f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d123      	bne.n	80064b2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006478:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006486:	4a30      	ldr	r2, [pc, #192]	; (8006548 <HAL_UART_IRQHandler+0x288>)
 8006488:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648e:	4618      	mov	r0, r3
 8006490:	f7fc ffce 	bl	8003430 <HAL_DMA_Abort_IT>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d016      	beq.n	80064c8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	e00e      	b.n	80064c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f862 	bl	8006574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	e00a      	b.n	80064c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f85e 	bl	8006574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	e006      	b.n	80064c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f85a 	bl	8006574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80064c6:	e038      	b.n	800653a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c8:	bf00      	nop
    return;
 80064ca:	e036      	b.n	800653a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00d      	beq.n	80064f2 <HAL_UART_IRQHandler+0x232>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fe19 	bl	8007122 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064f0:	e026      	b.n	8006540 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650a:	2b00      	cmp	r3, #0
 800650c:	d017      	beq.n	800653e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
    }
    return;
 8006516:	e012      	b.n	800653e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00e      	beq.n	8006540 <HAL_UART_IRQHandler+0x280>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fd35 	bl	8006f9c <UART_EndTransmit_IT>
    return;
 8006532:	bf00      	nop
 8006534:	e004      	b.n	8006540 <HAL_UART_IRQHandler+0x280>
      return;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <HAL_UART_IRQHandler+0x280>
    return;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <HAL_UART_IRQHandler+0x280>
    return;
 800653e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	08006f71 	.word	0x08006f71

0800654c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006588:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800658c:	b08a      	sub	sp, #40	; 0x28
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4bb8      	ldr	r3, [pc, #736]	; (80068a0 <UART_SetConfig+0x318>)
 80065be:	4013      	ands	r3, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065c6:	430b      	orrs	r3, r1
 80065c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4aae      	ldr	r2, [pc, #696]	; (80068a4 <UART_SetConfig+0x31c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	4313      	orrs	r3, r2
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4aa5      	ldr	r2, [pc, #660]	; (80068a8 <UART_SetConfig+0x320>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d126      	bne.n	8006666 <UART_SetConfig+0xde>
 8006618:	4ba4      	ldr	r3, [pc, #656]	; (80068ac <UART_SetConfig+0x324>)
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b03      	cmp	r3, #3
 8006624:	d81a      	bhi.n	800665c <UART_SetConfig+0xd4>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0xa4>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	0800663d 	.word	0x0800663d
 8006630:	0800664d 	.word	0x0800664d
 8006634:	08006645 	.word	0x08006645
 8006638:	08006655 	.word	0x08006655
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006642:	e105      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006644:	2302      	movs	r3, #2
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664a:	e101      	b.n	8006850 <UART_SetConfig+0x2c8>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006652:	e0fd      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665a:	e0f9      	b.n	8006850 <UART_SetConfig+0x2c8>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006662:	bf00      	nop
 8006664:	e0f4      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a91      	ldr	r2, [pc, #580]	; (80068b0 <UART_SetConfig+0x328>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d138      	bne.n	80066e2 <UART_SetConfig+0x15a>
 8006670:	4b8e      	ldr	r3, [pc, #568]	; (80068ac <UART_SetConfig+0x324>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f003 030c 	and.w	r3, r3, #12
 800667a:	2b0c      	cmp	r3, #12
 800667c:	d82c      	bhi.n	80066d8 <UART_SetConfig+0x150>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0xfc>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066d9 	.word	0x080066d9
 800668c:	080066d9 	.word	0x080066d9
 8006690:	080066d9 	.word	0x080066d9
 8006694:	080066c9 	.word	0x080066c9
 8006698:	080066d9 	.word	0x080066d9
 800669c:	080066d9 	.word	0x080066d9
 80066a0:	080066d9 	.word	0x080066d9
 80066a4:	080066c1 	.word	0x080066c1
 80066a8:	080066d9 	.word	0x080066d9
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066be:	e0c7      	b.n	8006850 <UART_SetConfig+0x2c8>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c6:	e0c3      	b.n	8006850 <UART_SetConfig+0x2c8>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e0bf      	b.n	8006850 <UART_SetConfig+0x2c8>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d6:	e0bb      	b.n	8006850 <UART_SetConfig+0x2c8>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066de:	bf00      	nop
 80066e0:	e0b6      	b.n	8006850 <UART_SetConfig+0x2c8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a73      	ldr	r2, [pc, #460]	; (80068b4 <UART_SetConfig+0x32c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d125      	bne.n	8006738 <UART_SetConfig+0x1b0>
 80066ec:	4b6f      	ldr	r3, [pc, #444]	; (80068ac <UART_SetConfig+0x324>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d011      	beq.n	800671e <UART_SetConfig+0x196>
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d802      	bhi.n	8006704 <UART_SetConfig+0x17c>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <UART_SetConfig+0x186>
 8006702:	e014      	b.n	800672e <UART_SetConfig+0x1a6>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d006      	beq.n	8006716 <UART_SetConfig+0x18e>
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d00c      	beq.n	8006726 <UART_SetConfig+0x19e>
 800670c:	e00f      	b.n	800672e <UART_SetConfig+0x1a6>
 800670e:	2300      	movs	r3, #0
 8006710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006714:	e09c      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006716:	2302      	movs	r3, #2
 8006718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671c:	e098      	b.n	8006850 <UART_SetConfig+0x2c8>
 800671e:	2304      	movs	r3, #4
 8006720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006724:	e094      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006726:	2308      	movs	r3, #8
 8006728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672c:	e090      	b.n	8006850 <UART_SetConfig+0x2c8>
 800672e:	2310      	movs	r3, #16
 8006730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006734:	bf00      	nop
 8006736:	e08b      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a5e      	ldr	r2, [pc, #376]	; (80068b8 <UART_SetConfig+0x330>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d125      	bne.n	800678e <UART_SetConfig+0x206>
 8006742:	4b5a      	ldr	r3, [pc, #360]	; (80068ac <UART_SetConfig+0x324>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d011      	beq.n	8006774 <UART_SetConfig+0x1ec>
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d802      	bhi.n	800675a <UART_SetConfig+0x1d2>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <UART_SetConfig+0x1dc>
 8006758:	e014      	b.n	8006784 <UART_SetConfig+0x1fc>
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d006      	beq.n	800676c <UART_SetConfig+0x1e4>
 800675e:	2bc0      	cmp	r3, #192	; 0xc0
 8006760:	d00c      	beq.n	800677c <UART_SetConfig+0x1f4>
 8006762:	e00f      	b.n	8006784 <UART_SetConfig+0x1fc>
 8006764:	2300      	movs	r3, #0
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676a:	e071      	b.n	8006850 <UART_SetConfig+0x2c8>
 800676c:	2302      	movs	r3, #2
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006772:	e06d      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006774:	2304      	movs	r3, #4
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677a:	e069      	b.n	8006850 <UART_SetConfig+0x2c8>
 800677c:	2308      	movs	r3, #8
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006782:	e065      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006784:	2310      	movs	r3, #16
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678a:	bf00      	nop
 800678c:	e060      	b.n	8006850 <UART_SetConfig+0x2c8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a4a      	ldr	r2, [pc, #296]	; (80068bc <UART_SetConfig+0x334>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d129      	bne.n	80067ec <UART_SetConfig+0x264>
 8006798:	4b44      	ldr	r3, [pc, #272]	; (80068ac <UART_SetConfig+0x324>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a6:	d014      	beq.n	80067d2 <UART_SetConfig+0x24a>
 80067a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ac:	d802      	bhi.n	80067b4 <UART_SetConfig+0x22c>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <UART_SetConfig+0x23a>
 80067b2:	e016      	b.n	80067e2 <UART_SetConfig+0x25a>
 80067b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b8:	d007      	beq.n	80067ca <UART_SetConfig+0x242>
 80067ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067be:	d00c      	beq.n	80067da <UART_SetConfig+0x252>
 80067c0:	e00f      	b.n	80067e2 <UART_SetConfig+0x25a>
 80067c2:	2300      	movs	r3, #0
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c8:	e042      	b.n	8006850 <UART_SetConfig+0x2c8>
 80067ca:	2302      	movs	r3, #2
 80067cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d0:	e03e      	b.n	8006850 <UART_SetConfig+0x2c8>
 80067d2:	2304      	movs	r3, #4
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d8:	e03a      	b.n	8006850 <UART_SetConfig+0x2c8>
 80067da:	2308      	movs	r3, #8
 80067dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e0:	e036      	b.n	8006850 <UART_SetConfig+0x2c8>
 80067e2:	2310      	movs	r3, #16
 80067e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e8:	bf00      	nop
 80067ea:	e031      	b.n	8006850 <UART_SetConfig+0x2c8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a2c      	ldr	r2, [pc, #176]	; (80068a4 <UART_SetConfig+0x31c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d129      	bne.n	800684a <UART_SetConfig+0x2c2>
 80067f6:	4b2d      	ldr	r3, [pc, #180]	; (80068ac <UART_SetConfig+0x324>)
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d014      	beq.n	8006830 <UART_SetConfig+0x2a8>
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680a:	d802      	bhi.n	8006812 <UART_SetConfig+0x28a>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <UART_SetConfig+0x298>
 8006810:	e016      	b.n	8006840 <UART_SetConfig+0x2b8>
 8006812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006816:	d007      	beq.n	8006828 <UART_SetConfig+0x2a0>
 8006818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800681c:	d00c      	beq.n	8006838 <UART_SetConfig+0x2b0>
 800681e:	e00f      	b.n	8006840 <UART_SetConfig+0x2b8>
 8006820:	2300      	movs	r3, #0
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006826:	e013      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006828:	2302      	movs	r3, #2
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682e:	e00f      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006836:	e00b      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683e:	e007      	b.n	8006850 <UART_SetConfig+0x2c8>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <UART_SetConfig+0x2c8>
 800684a:	2310      	movs	r3, #16
 800684c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <UART_SetConfig+0x31c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	f040 80fe 	bne.w	8006a58 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800685c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006860:	2b08      	cmp	r3, #8
 8006862:	d837      	bhi.n	80068d4 <UART_SetConfig+0x34c>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x2e4>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006891 	.word	0x08006891
 8006870:	080068d5 	.word	0x080068d5
 8006874:	08006899 	.word	0x08006899
 8006878:	080068d5 	.word	0x080068d5
 800687c:	080068c5 	.word	0x080068c5
 8006880:	080068d5 	.word	0x080068d5
 8006884:	080068d5 	.word	0x080068d5
 8006888:	080068d5 	.word	0x080068d5
 800688c:	080068cd 	.word	0x080068cd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006890:	f7fd fe58 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8006894:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006896:	e020      	b.n	80068da <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006898:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <UART_SetConfig+0x338>)
 800689a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800689c:	e01d      	b.n	80068da <UART_SetConfig+0x352>
 800689e:	bf00      	nop
 80068a0:	efff69f3 	.word	0xefff69f3
 80068a4:	40008000 	.word	0x40008000
 80068a8:	40013800 	.word	0x40013800
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40004400 	.word	0x40004400
 80068b4:	40004800 	.word	0x40004800
 80068b8:	40004c00 	.word	0x40004c00
 80068bc:	40005000 	.word	0x40005000
 80068c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80068c4:	f7fd fda8 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80068c8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068ca:	e006      	b.n	80068da <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80068cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068d2:	e002      	b.n	80068da <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	76fb      	strb	r3, [r7, #27]
        break;
 80068d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 81b9 	beq.w	8006c54 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	4413      	add	r3, r2
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d305      	bcc.n	80068fe <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d902      	bls.n	8006904 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	76fb      	strb	r3, [r7, #27]
 8006902:	e1a7      	b.n	8006c54 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8006904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006908:	2b08      	cmp	r3, #8
 800690a:	f200 8092 	bhi.w	8006a32 <UART_SetConfig+0x4aa>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x38c>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006939 	.word	0x08006939
 8006918:	08006a33 	.word	0x08006a33
 800691c:	08006987 	.word	0x08006987
 8006920:	08006a33 	.word	0x08006a33
 8006924:	080069bb 	.word	0x080069bb
 8006928:	08006a33 	.word	0x08006a33
 800692c:	08006a33 	.word	0x08006a33
 8006930:	08006a33 	.word	0x08006a33
 8006934:	08006a09 	.word	0x08006a09
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006938:	f7fd fe04 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 800693c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4619      	mov	r1, r3
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	f04f 0400 	mov.w	r4, #0
 800694e:	0214      	lsls	r4, r2, #8
 8006950:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006954:	020b      	lsls	r3, r1, #8
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6852      	ldr	r2, [r2, #4]
 800695a:	0852      	lsrs	r2, r2, #1
 800695c:	4611      	mov	r1, r2
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	eb13 0b01 	adds.w	fp, r3, r1
 8006966:	eb44 0c02 	adc.w	ip, r4, r2
 800696a:	4658      	mov	r0, fp
 800696c:	4661      	mov	r1, ip
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f04f 0400 	mov.w	r4, #0
 8006976:	461a      	mov	r2, r3
 8006978:	4623      	mov	r3, r4
 800697a:	f7f9 fc25 	bl	80001c8 <__aeabi_uldivmod>
 800697e:	4603      	mov	r3, r0
 8006980:	460c      	mov	r4, r1
 8006982:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006984:	e058      	b.n	8006a38 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	f04f 0400 	mov.w	r4, #0
 8006990:	49ae      	ldr	r1, [pc, #696]	; (8006c4c <UART_SetConfig+0x6c4>)
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	eb13 0b01 	adds.w	fp, r3, r1
 800699a:	eb44 0c02 	adc.w	ip, r4, r2
 800699e:	4658      	mov	r0, fp
 80069a0:	4661      	mov	r1, ip
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f04f 0400 	mov.w	r4, #0
 80069aa:	461a      	mov	r2, r3
 80069ac:	4623      	mov	r3, r4
 80069ae:	f7f9 fc0b 	bl	80001c8 <__aeabi_uldivmod>
 80069b2:	4603      	mov	r3, r0
 80069b4:	460c      	mov	r4, r1
 80069b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069b8:	e03e      	b.n	8006a38 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80069ba:	f7fd fd2d 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80069be:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	4619      	mov	r1, r3
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	f04f 0400 	mov.w	r4, #0
 80069d0:	0214      	lsls	r4, r2, #8
 80069d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069d6:	020b      	lsls	r3, r1, #8
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6852      	ldr	r2, [r2, #4]
 80069dc:	0852      	lsrs	r2, r2, #1
 80069de:	4611      	mov	r1, r2
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	eb13 0b01 	adds.w	fp, r3, r1
 80069e8:	eb44 0c02 	adc.w	ip, r4, r2
 80069ec:	4658      	mov	r0, fp
 80069ee:	4661      	mov	r1, ip
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f04f 0400 	mov.w	r4, #0
 80069f8:	461a      	mov	r2, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	f7f9 fbe4 	bl	80001c8 <__aeabi_uldivmod>
 8006a00:	4603      	mov	r3, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a06:	e017      	b.n	8006a38 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	f04f 0400 	mov.w	r4, #0
 8006a12:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006a16:	f144 0100 	adc.w	r1, r4, #0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f04f 0400 	mov.w	r4, #0
 8006a22:	461a      	mov	r2, r3
 8006a24:	4623      	mov	r3, r4
 8006a26:	f7f9 fbcf 	bl	80001c8 <__aeabi_uldivmod>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a30:	e002      	b.n	8006a38 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	76fb      	strb	r3, [r7, #27]
            break;
 8006a36:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3e:	d308      	bcc.n	8006a52 <UART_SetConfig+0x4ca>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a46:	d204      	bcs.n	8006a52 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e100      	b.n	8006c54 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	76fb      	strb	r3, [r7, #27]
 8006a56:	e0fd      	b.n	8006c54 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a60:	f040 8084 	bne.w	8006b6c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006a64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d85f      	bhi.n	8006b2c <UART_SetConfig+0x5a4>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <UART_SetConfig+0x4ec>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006a99 	.word	0x08006a99
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006ad9 	.word	0x08006ad9
 8006a80:	08006b2d 	.word	0x08006b2d
 8006a84:	08006af5 	.word	0x08006af5
 8006a88:	08006b2d 	.word	0x08006b2d
 8006a8c:	08006b2d 	.word	0x08006b2d
 8006a90:	08006b2d 	.word	0x08006b2d
 8006a94:	08006b15 	.word	0x08006b15
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a98:	f7fd fd54 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8006a9c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	005a      	lsls	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	441a      	add	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ab6:	e03c      	b.n	8006b32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7fd fd5a 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 8006abc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	005a      	lsls	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	085b      	lsrs	r3, r3, #1
 8006ac8:	441a      	add	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ad6:	e02c      	b.n	8006b32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006ae2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6852      	ldr	r2, [r2, #4]
 8006aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006af2:	e01e      	b.n	8006b32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af4:	f7fd fc90 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 8006af8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	005a      	lsls	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	441a      	add	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b12:	e00e      	b.n	8006b32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b2a:	e002      	b.n	8006b32 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	76fb      	strb	r3, [r7, #27]
        break;
 8006b30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	2b0f      	cmp	r3, #15
 8006b36:	d916      	bls.n	8006b66 <UART_SetConfig+0x5de>
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b3e:	d212      	bcs.n	8006b66 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f023 030f 	bic.w	r3, r3, #15
 8006b48:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	89fb      	ldrh	r3, [r7, #14]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	89fa      	ldrh	r2, [r7, #14]
 8006b62:	60da      	str	r2, [r3, #12]
 8006b64:	e076      	b.n	8006c54 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	76fb      	strb	r3, [r7, #27]
 8006b6a:	e073      	b.n	8006c54 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d85c      	bhi.n	8006c2e <UART_SetConfig+0x6a6>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <UART_SetConfig+0x5f4>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006bbf 	.word	0x08006bbf
 8006b84:	08006bdd 	.word	0x08006bdd
 8006b88:	08006c2f 	.word	0x08006c2f
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006c2f 	.word	0x08006c2f
 8006b94:	08006c2f 	.word	0x08006c2f
 8006b98:	08006c2f 	.word	0x08006c2f
 8006b9c:	08006c17 	.word	0x08006c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fd fcd0 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8006ba4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085a      	lsrs	r2, r3, #1
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	441a      	add	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bbc:	e03a      	b.n	8006c34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bbe:	f7fd fcd7 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 8006bc2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	085a      	lsrs	r2, r3, #1
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	441a      	add	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bda:	e02b      	b.n	8006c34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006be6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6852      	ldr	r2, [r2, #4]
 8006bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bf6:	e01d      	b.n	8006c34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf8:	f7fd fc0e 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 8006bfc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	085a      	lsrs	r2, r3, #1
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	441a      	add	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c14:	e00e      	b.n	8006c34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c2c:	e002      	b.n	8006c34 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	76fb      	strb	r3, [r7, #27]
        break;
 8006c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d90a      	bls.n	8006c50 <UART_SetConfig+0x6c8>
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c40:	d206      	bcs.n	8006c50 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	e003      	b.n	8006c54 <UART_SetConfig+0x6cc>
 8006c4c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c60:	7efb      	ldrb	r3, [r7, #27]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3728      	adds	r7, #40	; 0x28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01a      	beq.n	8006d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6a:	d10a      	bne.n	8006d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006dbe:	f7fa ffef 	bl	8001da0 <HAL_GetTick>
 8006dc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0308 	and.w	r3, r3, #8
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d10e      	bne.n	8006df0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f82a 	bl	8006e3a <UART_WaitOnFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e020      	b.n	8006e32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d10e      	bne.n	8006e1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f814 	bl	8006e3a <UART_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e00a      	b.n	8006e32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	603b      	str	r3, [r7, #0]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4a:	e05d      	b.n	8006f08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e52:	d059      	beq.n	8006f08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e54:	f7fa ffa4 	bl	8001da0 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d302      	bcc.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d11b      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0201 	bic.w	r2, r2, #1
 8006e88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2220      	movs	r2, #32
 8006e94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e042      	b.n	8006f28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d02b      	beq.n	8006f08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ebe:	d123      	bne.n	8006f08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ed8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0201 	bic.w	r2, r2, #1
 8006ee8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e00f      	b.n	8006f28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69da      	ldr	r2, [r3, #28]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4013      	ands	r3, r2
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d092      	beq.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff faf0 	bl	8006574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fac3 	bl	800654c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fdc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe2:	2b22      	cmp	r3, #34	; 0x22
 8006fe4:	d13a      	bne.n	800705c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fec:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fee:	89bb      	ldrh	r3, [r7, #12]
 8006ff0:	b2d9      	uxtb	r1, r3
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	400a      	ands	r2, r1
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d123      	bne.n	8007070 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007036:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff fa83 	bl	8006560 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800705a:	e009      	b.n	8007070 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	8b1b      	ldrh	r3, [r3, #24]
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0208 	orr.w	r2, r2, #8
 800706c:	b292      	uxth	r2, r2
 800706e:	831a      	strh	r2, [r3, #24]
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007086:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800708c:	2b22      	cmp	r3, #34	; 0x22
 800708e:	d13a      	bne.n	8007106 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007096:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800709e:	89ba      	ldrh	r2, [r7, #12]
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	4013      	ands	r3, r2
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d123      	bne.n	800711a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0201 	bic.w	r2, r2, #1
 80070f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fa2e 	bl	8006560 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007104:	e009      	b.n	800711a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	8b1b      	ldrh	r3, [r3, #24]
 800710c:	b29a      	uxth	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0208 	orr.w	r2, r2, #8
 8007116:	b292      	uxth	r2, r2
 8007118:	831a      	strh	r2, [r3, #24]
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4e0d      	ldr	r6, [pc, #52]	; (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	; (8007174 <__libc_init_array+0x3c>)
 800713e:	1ba4      	subs	r4, r4, r6
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2500      	movs	r5, #0
 8007144:	42a5      	cmp	r5, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4e0b      	ldr	r6, [pc, #44]	; (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	; (800717c <__libc_init_array+0x44>)
 800714c:	f000 f820 	bl	8007190 <_init>
 8007150:	1ba4      	subs	r4, r4, r6
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2500      	movs	r5, #0
 8007156:	42a5      	cmp	r5, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007160:	4798      	blx	r3
 8007162:	3501      	adds	r5, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800716a:	4798      	blx	r3
 800716c:	3501      	adds	r5, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	080071f8 	.word	0x080071f8
 8007174:	080071f8 	.word	0x080071f8
 8007178:	080071f8 	.word	0x080071f8
 800717c:	080071fc 	.word	0x080071fc

08007180 <memset>:
 8007180:	4402      	add	r2, r0
 8007182:	4603      	mov	r3, r0
 8007184:	4293      	cmp	r3, r2
 8007186:	d100      	bne.n	800718a <memset+0xa>
 8007188:	4770      	bx	lr
 800718a:	f803 1b01 	strb.w	r1, [r3], #1
 800718e:	e7f9      	b.n	8007184 <memset+0x4>

08007190 <_init>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr

0800719c <_fini>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr
